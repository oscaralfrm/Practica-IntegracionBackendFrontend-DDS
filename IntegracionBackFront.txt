
  .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-  .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-
 / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \ / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \
`-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'    `-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'  
                                                                                                    
 ___ _   _ _____ _____ ____ ____     _    ____ ___ ___  _   _                                       
|_ _| \ | |_   _| ____/ ___|  _ \   / \  / ___|_ _/ _ \| \ | |                                      
 | ||  \| | | | |  _|| |  _| |_) | / _ \| |    | | | | |  \| |                                      
 | || |\  | | | | |__| |_| |  _ < / ___ | |___ | | |_| | |\  |                                      
|___|_| \_| |_| |_____\____|_| \_/_/   \_\____|___\___/|_| \_|                                      
                                                                                                    
                                                                                                    
 ____    _    ____ _  _______ _   _ ____            _____ ____   ___  _   _ _____ _____ _   _ ____  
| __ )  / \  / ___| |/ | ____| \ | |  _ \          |  ___|  _ \ / _ \| \ | |_   _| ____| \ | |  _ \ 
|  _ \ / _ \| |   | ' /|  _| |  \| | | | |  _____  | |_  | |_) | | | |  \| | | | |  _| |  \| | | | |
| |_) / ___ | |___| . \| |___| |\  | |_| | |_____| |  _| |  _ <| |_| | |\  | | | | |___| |\  | |_| |
|____/_/   \_\____|_|\_|_____|_| \_|____/          |_|   |_| \_\\___/|_| \_| |_| |_____|_| \_|____/ 


::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
::::::::::::::::::::::::::::::::::::::::::::-*********=::::::::::::::-**#%%%%%%##*+:::::::::::::::::
::::::::::::::::::::::::::::::::::::::::::::-#%%%%%%%%+:::::::::::-#%%%%%%%%%%%%%%%%%=::::::::::::::
::::::::::::::::::::::::::::::::::::::::::::-#%%%%%%%%+:::::::::-#%%%%%%%%%%%%%%%%%%%%#=::::::::::::
::::::::::::::::::::::::::::::::::::::::::::-#%%%%%%%%+::::::::=#%%%%%%%%%%%%%%%%%%%%%%%*:::::::::::
::::::::::::::::::::::::::::::::::::::::::::-#%%%%%%%%+::::::::#%%%%%%%%%#****#%%%%%%%%#=:::::::::::
::::::::::::::::::::::::::::::::::::::::::::-#%%%%%%%%+:::::::*%%%%%%%%%-:::::::+%%%%=-:::::::::::::
::::::::::::::::::::::::::::::::::::::::::::-#%%%%%%%%+:::::::#%%%%%%%%=:::::::::-+:::::::::::::::::
::::::::::::::::::::::::::::::::::::::::::::-#%%%%%%%%+:::::::#%%%%%%%%*::::::::::::::::::::::::::::
::::::::::::::::::::::::::::::::::::::::::::-#%%%%%%%%+:::::::+%%%%%%%%%#-::::::::::::::::::::::::::
::::::::::::::::::::::::::::::::::::::::::::-#%%%%%%%%+::::::::#%%%%%%%%%%%*--::::::::::::::::::::::
::::::::::::::::::::::::::::::::::::::::::::-#%%%%%%%%+::::::::-#%%%%%%%%%%%%%#*+:::::::::::::::::::
::::::::::::::::::::::::::::::::::::::::::::-#%%%%%%%%+:::::::::-#%%%%%%%%%%%%%%%%%*-:::::::::::::::
::::::::::::::::::::::::::::::::::::::::::::-#%%%%%%%%+:::::::::::-*%%%%%%%%%%%%%%%%%%*-::::::::::::
::::::::::::::::::::::::::::::::::::::::::::-#%%%%%%%%+::::::::::::::=#%%%%%%%%%%%%%%%%%*-::::::::::
::::::::::::::::::::::::::::::::::::::::::::-#%%%%%%%%+:::::::::::::::::-*#%%%%%%%%%%%%%%#-:::::::::
::::::::::::::::::::::::::::::::::::::::::::-#%%%%%%%%+:::::::::::::::::::::-+#%%%%%%%%%%%%-::::::::
::::::::::::::::::::::::::::::::::::::::::::-#%%%%%%%%+:::::::::::::::::::::::::=%%%%%%%%%%*::::::::
::::::::::::::::::::::::::::::::::::::::::::-#%%%%%%%%+:::::::::::::::::::::::::::*%%%%%%%%#-:::::::
:::::::::::::::::::::::::::::::::+::::::::::-%%%%%%%%%+:::::::::-*#*::::::::::::::=%%%%%%%%#-:::::::
:::::::::::::::::::::::::::::-=#%%%-::::::::=%%%%%%%%%-::::::-*%%%%%%=::::::::::::*%%%%%%%%#-:::::::
::::::::::::::::::::::::::-+#%%%%%%%*-::::-*%%%%%%%%%#:::::-#%%%%%%%%%#*-::::::-+#%%%%%%%%%*::::::::
::::::::::::::::::::::::::=#%%%%%%%%%%%%%%%%%%%%%%%%%-::::::=%%%%%%%%%%%%%%%%%%%%%%%%%%%%%#:::::::::
:::::::::::::::::::::::::::-#%%%%%%%%%%%%%%%%%%%%%%#=::::::::-*%%%%%%%%%%%%%%%%%%%%%%%%%%*::::::::::
:::::::::::::::::::::::::::::+#%%%%%%%%%%%%%%%%%%%#-:::::::::::-*%%%%%%%%%%%%%%%%%%%%%%%=:::::::::::
:::::::::::::::::::::::::::::::=*#%%%%%%%%%%%%%#*-::::::::::::::::=*#%%%%%%%%%%%%%%%#*-:::::::::::::
::::::::::::::::::::::::::::::::::--=++***++=-::::::::::::::::::::::::-==++***++==-:::::::::::::::::
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
                                                                                                    

  .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-  .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-
 / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \ / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \
`-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'    `-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'  
                                                                  
                                                                              
  ____ _   _ ___    _      _   _ _____ ____ _   _    _      ____   ___  ____  
 / ___| | | |_ _|  / \    | | | | ____/ ___| | | |  / \    |  _ \ / _ \|  _ \ 
| |  _| | | || |  / _ \   | |_| |  _|| |   | |_| | / _ \   | |_) | | | | |_) |
| |_| | |_| || | / ___ \  |  _  | |__| |___|  _  |/ ___ \  |  __/| |_| |  _ < 
 \____|\___/|___/_/   \_\ |_| |_|_____\____|_| |_/_/   \_\ |_|    \___/|_| \_\
                                                                              
                                                                              
  ___  ____   ____    _    ____    ____   ___  __  __ _____ ____   ___        
 / _ \/ ___| / ___|  / \  |  _ \  |  _ \ / _ \|  \/  | ____|  _ \ / _ \       			
| | | \___ \| |     / _ \ | |_) | | |_) | | | | |\/| |  _| | |_) | | | |      
| |_| |___) | |___ / ___ \|  _ <  |  _ <| |_| | |  | | |___|  _ <| |_| |      
 \___/|____/ \____/_/   \_|_| \_\ |_| \_\\___/|_|  |_|_____|_| \_\\___/       
                                                                              
                                                                              
   ____   ___  ____   ____    _    ____     _    _     _____ ____  __  __     
  / __ \ / _ \/ ___| / ___|  / \  |  _ \   / \  | |   |  ___|  _ \|  \/  |    
 / / _` | | | \___ \| |     / _ \ | |_) | / _ \ | |   | |_  | |_) | |\/| |    
| | (_| | |_| |___) | |___ / ___ \|  _ < / ___ \| |___|  _| |  _ <| |  | |     				
 \ \__,_|\___/|____/ \____/_/   \_|_| \_/_/   \_|_____|_|   |_| \_|_|  |_|    
  \____/                                                                      




Para la realización de ésta guía de integración entre el Backend y el Frontend de nuestra aplicación, siguiendo con los lineamientos de la cátedra de DDS,
dividiremos el trabajo en dos fases o etapas: La primera etapa basándose en el desarrollo del modelado del negocio con el Backend; y una segunda etapa
en donde consumiremos la API creada en la primera etapa y responderemos a la necesidad del cliente, maquetando y "pintando" en el Frontend los datos sugeridos
de un ejercicio cualquiera.

                                                                                                                    
  ___  ____  ____  _____ _   _   ____  _   _  ____ _____ ____  ___ ____   ___                                       
 / _ \|  _ \|  _ \| ____| \ | | / ___|| | | |/ ___| ____|  _ \|_ _|  _ \ / _ \ _                                    
| | | | |_) | | | |  _| |  \| | \___ \| | | | |  _|  _| | |_) || || | | | | | (_)                                   
| |_| |  _ <| |_| | |___| |\  |  ___) | |_| | |_| | |___|  _ < | || |_| | |_| |_                                    
 \___/|_| \_|____/|_____|_| \_| |____/ \___/ \____|_____|_| \_|___|____/ \___/(_)                                   
                                                                                                                    
                                                                                                                    
 ____  ____  ___ __  __ _____ ____   ___    ____    _    ____ _  _______ _   _ ____                                 
|  _ \|  _ \|_ _|  \/  | ____|  _ \ / _ \  | __ )  / \  / ___| |/ | ____| \ | |  _ \ _                              
| |_) | |_) || || |\/| |  _| | |_) | | | | |  _ \ / _ \| |   | ' /|  _| |  \| | | | (_)                             
|  __/|  _ < | || |  | | |___|  _ <| |_| | | |_) / ___ | |___| . \| |___| |\  | |_| |_                              
|_|   |_| \_|___|_|  |_|_____|_| \_\\___/  |____/_/   \_\____|_|\_|_____|_| \_|____/(_)                             
                                                                                                                    
                                                                                                                    
 ___    ____    _    ____  _____   ____  _____   ____    _  _____ ___  ____                                         
/ \ \  | __ )  / \  / ___|| ____| |  _ \| ____| |  _ \  / \|_   _/ _ \/ ___|                                        
| || | |  _ \ / _ \ \___ \|  _|   | | | |  _|   | | | |/ _ \ | || | | \___ \                                        
| || | | |_) / ___ \ ___) | |___  | |_| | |___  | |_| / ___ \| || |_| |___) |                                       
|_|| | |____/_/   \_|____/|_____| |____/|_____| |____/_/   \_|_| \___/|____/                                        
  /_/                                                                                                               
                                                                                                                    
 ______    __  __  ___  ____  _____ _     ___  ____     ___    _____ _   _ _____ ___ ____    _    ____  _____ ____  
|___ \ \  |  \/  |/ _ \|  _ \| ____| |   / _ \/ ___|   / _ \  | ____| \ | |_   _|_ _|  _ \  / \  |  _ \| ____/ ___| 
  __) | | | |\/| | | | | | | |  _| | |  | | | \___ \  | | | | |  _| |  \| | | |  | || | | |/ _ \ | | | |  _| \___ \ 
 / __/| | | |  | | |_| | |_| | |___| |__| |_| |___) | | |_| | | |___| |\  | | |  | || |_| / ___ \| |_| | |___ ___) |
|_____| | |_|  |_|\___/|____/|_____|_____\___/|____/   \___/  |_____|_| \_| |_| |___|____/_/   \_|____/|_____|____/ 
     /_/                                                                                                            
                                                                                                                    
 ______    ____  _____ ______     _____ ____ ___ ___  ____                                                          
|___ \ \  / ___|| ____|  _ \ \   / |_ _/ ___|_ _/ _ \/ ___|                                                         
  |_ \| | \___ \|  _| | |_) \ \ / / | | |    | | | | \___ \                                                         
 ___) | |  ___) | |___|  _ < \ V /  | | |___ | | |_| |___) |                                                        
|____/| | |____/|_____|_| \_\ \_/  |___\____|___\___/|____/                                                         
     /_/                                                                                                            
                                                                                                                    
 _  _ __       _    ____  ____        _ ____     ____  __    _    ___ _   ___                                       
| || |\ \     / \  |  _ \|  _ \      | / ___|   / |  \/  |  / \  |_ _| \ | \ \                                      
| || |_| |   / _ \ | |_) | |_) |  _  | \___ \  | || |\/| | / _ \  | ||  \| || |                                     
|__   _| |  / ___ \|  __/|  __/  | |_| |___) | | || |  | |/ ___ \ | || |\  || |                                     
   |_| | | /_/   \_|_|   |_|      \___/|____/  | ||_|  |_/_/   \_|___|_| \_|| |                                     
      /_/                                       \_\                        /_/                                      



Primero atenderemos a la lógica del negocio a través del maquetado del Backend solicitado por el ejercicio. Éste es el pilar de nuestra aplicación,
los datos juegan un papel clave en el mantenimiento y ejecución de nuestro software y deberíamos empezar en ésta capa para posteriormente brindarle
la información a nuestro cliente.

                                                                                                                                                                           
 ____  _____ ____ _   _ _   _ ____   ___    _____ ____   ___  _   _ _____ _____ _   _ ____                                                                                 
/ ___|| ____/ ___| | | | \ | |  _ \ / _ \  |  ___|  _ \ / _ \| \ | |_   _| ____| \ | |  _ \ _                                                                              
\___ \|  _|| |  _| | | |  \| | | | | | | | | |_  | |_) | | | |  \| | | | |  _| |  \| | | | (_)                                                                             
 ___) | |__| |_| | |_| | |\  | |_| | |_| | |  _| |  _ <| |_| | |\  | | | | |___| |\  | |_| |_                                                                              
|____/|_____\____|\___/|_| \_|____/ \___/  |_|   |_| \_\\___/|_| \_| |_| |_____|_| \_|____/(_)                                                                             
                                                                                                                                                                           
                                                                                                                                                                           
 ___     ____ ___  _   _ ____  _   _ __  __ ___ ____    _        _         _    ____ ___    ___  _   _ _____    ____ ____  _____    _    __  __  ___  ____                 
/ \ \   / ___/ _ \| \ | / ___|| | | |  \/  |_ _|  _ \  | |      / \       / \  |  _ |_ _|  / _ \| | | | ____|  / ___|  _ \| ____|  / \  |  \/  |/ _ \/ ___|                
| || | | |  | | | |  \| \___ \| | | | |\/| || || |_) | | |     / _ \     / _ \ | |_) | |  | | | | | | |  _|   | |   | |_) |  _|   / _ \ | |\/| | | | \___ \                
| || | | |__| |_| | |\  |___) | |_| | |  | || ||  _ <  | |___ / ___ \   / ___ \|  __/| |  | |_| | |_| | |___  | |___|  _ <| |___ / ___ \| |  | | |_| |___) |               
|_|| |  \____\___/|_| \_|____/ \___/|_|  |_|___|_| \_\ |_____/_/   \_\ /_/   \_|_|  |___|  \__\_\\___/|_____|  \____|_| \_|_____/_/   \_|_|  |_|\___/|____/                
  /_/                                                                                                                                                                      
                                                                                                                                                                           
 ______    __  __    _    ___  _   _ _____ _____  _    ____    _        _      _____  _    ____  _        _      _____ _   _   _____ _       _____ ____   ___  _   _ _____ 
|___ \ \  |  \/  |  / \  / _ \| | | | ____|_   _|/ \  |  _ \  | |      / \    |_   _|/ \  | __ )| |      / \    | ____| \ | | | ____| |     |  ___|  _ \ / _ \| \ | |_   _|
  __) | | | |\/| | / _ \| | | | | | |  _|   | | / _ \ | |_) | | |     / _ \     | | / _ \ |  _ \| |     / _ \   |  _| |  \| | |  _| | |     | |_  | |_) | | | |  \| | | |  
 / __/| | | |  | |/ ___ | |_| | |_| | |___  | |/ ___ \|  _ <  | |___ / ___ \    | |/ ___ \| |_) | |___ / ___ \  | |___| |\  | | |___| |___  |  _| |  _ <| |_| | |\  | | |  
|_____| | |_|  |_/_/   \_\__\_\\___/|_____| |_/_/   \_|_| \_\ |_____/_/   \_\   |_/_/   \_|____/|_____/_/   \_\ |_____|_| \_| |_____|_____| |_|   |_| \_\\___/|_| \_| |_|  
     /_/                                                                                                                                                                   
                                                                                                                                                                           
 ______     ____ _   _ __  __ ____  _     ___ ____    _        _      _     ___   ____ ___ ____    _      ____  _____   _   _ _____ ____  ___   ____ ___ ___               
|___ \ \   / ___| | | |  \/  |  _ \| |   |_ _|  _ \  | |      / \    | |   / _ \ / ___|_ _/ ___|  / \    |  _ \| ____| | \ | | ____/ ___|/ _ \ / ___|_ _/ _ \              
  |_ \| | | |   | | | | |\/| | |_) | |    | || |_) | | |     / _ \   | |  | | | | |  _ | | |     / _ \   | | | |  _|   |  \| |  _|| |  _| | | | |    | | | | |             
 ___) | | | |___| |_| | |  | |  __/| |___ | ||  _ <  | |___ / ___ \  | |__| |_| | |_| || | |___ / ___ \  | |_| | |___  | |\  | |__| |_| | |_| | |___ | | |_| |             
|____/| |  \____|\___/|_|  |_|_|   |_____|___|_| \_\ |_____/_/   \_\ |_____\___/ \____|___\____/_/   \_\ |____/|_____| |_| \_|_____\____|\___/ \____|___\___/              
     /_/                                                                                                                                                                   


Una vez tengamos la información en nuestro servidor, podremos consumirla en nuestro Front gracias a varios mecanismos que tiene incorporado el lenguaje JavaScript,
desde el consumo de APIs creadas por nosotros (o por terceros) con fetch(); hasta la maquetación y manipulación del DOM de HTML con los métodos del objeto document:
document.getElementById(), document.getElementsByClassName()...

El objetivo de ésta capa es comunicarle al usuario lo que necesita saber, obteniendo la información del Backend a través del consumo de la API creada con fetch()
y luego "pintarlo en pantalla", a través de un renderizado hecho con JavaScript.


	FAQ (Preguntas Frecuentes):
	- P: ¿Qué es una API?
	- R: Es una pieza de Software (programa) que permite, al ser consumida, obtener datos e información alojados en algún servidor. Se puede construir con lenguajes como JavaScript a través de Node.js, Java, C# (con la plataforma .NET), Python, etc.
	
	- P: ¿Por qué trabajamos primero con el Backend?
	- R: Porque si no tenemos la capa de los datos de nuestra aplicación, no podremos utilizarla en el Frontend.
	


  .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-  .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-
 / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \ / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \
`-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'    `-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'  

               
 ____  ____  ___ __  __ _____ ____   ___  ____    ____   _    ____   ___  ____  
|  _ \|  _ \|_ _|  \/  | ____|  _ \ / _ \/ ___|  |  _ \ / \  / ___| / _ \/ ___| 
| |_) | |_) || || |\/| |  _| | |_) | | | \___ \  | |_) / _ \ \___ \| | | \___ \ 
|  __/|  _ < | || |  | | |___|  _ <| |_| |___) | |  __/ ___ \ ___) | |_| |___) |
|_|   |_| \_|___|_|  |_|_____|_| \_\\___/|____/  |_| /_/   \_|____/ \___/|____/ 
                                                                                


1.) Primero, creamos las carpetas que se nos soliciten en el día del parcial. En mi caso particular comienzo creando una carpeta general,
y después creo dos carpetas, una para el Front y otra para el Back, para trabajarlos por separado. Al final se unitán los dos desarrollos en un directorio en común.
2.) Instalo las dependencias que me ofrezcan o sugieran en el parcial (escribiendo en la terminal el comando: npm i). Asegurarse de que todo esté instalado pues en los siguientes
puntos habrá que utilizar éstas dependencias. Si con npm i no es suficiente, seguir el punto de DEPENDENCIAS IMPORTANTES y manualmente uno por uno bajar todo.


  .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-  .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-
 / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \ / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \
`-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'    `-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'  


    ____  ___   ________ __ _______   ______     ____  ______   __    ___       
   / __ )/   | / ____/ //_// ____/ | / / __ \   / __ \/ ____/  / /   /   |      
  / __  / /| |/ /   / ,<  / __/ /  |/ / / / /  / / / / __/    / /   / /| |      
 / /_/ / ___ / /___/ /| |/ /___/ /|  / /_/ /  / /_/ / /___   / /___/ ___ |      
/_____/_/  |_\____/_/ |_/_____/_/_|_/_____/__/_____/_____/ _/_____/_/  |_|      
   /   |  / __ \/ /   /  _/ ____/   | / ____/  _/ __ \/ | / /                   
  / /| | / /_/ / /    / // /   / /| |/ /    / // / / /  |/ /                    
 / ___ |/ ____/ /____/ // /___/ ___ / /____/ // /_/ / /|  /                     
/_/  |_/_/   /_____/___/\____/_/  |_\____/___/\____/_/ |_/                      
                                                                                



En este punto, el objetivo es que nuestra estructura de proyectos quede más o menos de la siguiente forma:

EJERCICIOPRACTICA/
├─ FRONTEND/
├─ BACKEND/
│  ├─ DATABASES/
│  │  ├─ db.js // ACÁ ESTARÁ EL MÓDULO DE SEQUELIZE A EXPORTAR
│  │  ├─ db-init.js // ARCHIVO DE INICIALIZACIÓN DE LA BBDD
│  │  ├─ db.sqlite // ES LA BASE DE DATOS DE LA APP
│  │  ├─ db-mockaroo.js // SI NECESITAMOS CREAR LA BBDD MANUALMENTE
│  ├─ MODELOS/
│  │  ├─ clientes.js // EL MODELO DE CLIENTES QUE SERÁ MAPEADO POR EL ORM
│  ├─ SERVICIOS/
│  │  ├─ clientes.service.js // TENDRÁ LOS MÉTODOS QUE ATIENDAN AL NEGOCIO
│  ├─ CONFIG/
│  │  ├─ .env // ARCHIVO DE CONFIGURACIÓN PARA LOS PUERTOS
│  ├─ app.js // ÉSTE ES EL "MAIN" DEL BACKEND





3.) EMPEZAMOS CON LA DEFINICIÓN DE LA BASE DE DATOS:


                                                                      
 __  __    _    _   _ _____    _  ___    ____  _____   _        _     
|  \/  |  / \  | \ | | ____|  | |/ _ \  |  _ \| ____| | |      / \    
| |\/| | / _ \ |  \| |  _| _  | | | | | | | | |  _|   | |     / _ \   
| |  | |/ ___ \| |\  | |__| |_| | |_| | | |_| | |___  | |___ / ___ \  
|_|  |_/_/   \_|_| \_|_____\___/ \___/  |____/|_____| |_____/_/   \_\ 
                                                                      
                                                                      
 ____    _    ____  _____   ____  _____   ____    _  _____ ___  ____  
| __ )  / \  / ___|| ____| |  _ \| ____| |  _ \  / \|_   _/ _ \/ ___| 
|  _ \ / _ \ \___ \|  _|   | | | |  _|   | | | |/ _ \ | || | | \___ \ 
| |_) / ___ \ ___) | |___  | |_| | |___  | |_| / ___ \| || |_| |___) |
|____/_/   \_|____/|_____| |____/|_____| |____/_/   \_|_| \___/|____/ 
                                                                      

			⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣀⣀⣀⣤⣤⣤⣤⣀⣀⣀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀
			⠀⠀⠀⠀⠀⣠⣴⣶⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣶⣦⣄⠀⠀⠀⠀⠀
			⠀⠀⠀⠀⠀⠙⠻⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠟⠋⠀⠀⠀⠀⠀
			⠀⠀⠀⠀⠀⣿⣶⣤⣄⣉⣉⠙⠛⠛⠛⠛⠛⠛⠋⣉⣉⣠⣤⣶⣿⠀⠀⠀⠀⠀
			⠀⠀⠀⠀⠀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀⠀
			⠀⠀⠀⠀⠀⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠀⠀⠀⠀⠀
			⠀⠀⠀⠀⠀⣄⡉⠛⠻⠿⢿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠿⠟⠛⢉⣠⠀⠀⠀⠀⠀
			⠀⠀⠀⠀⠀⣿⣿⣿⣶⣶⣤⣤⣤⣤⣤⣤⣤⣤⣤⣤⣶⣶⣿⣿⣿⠀⠀⠀⠀⠀
			⠀⠀⠀⠀⠀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀⠀
			⠀⠀⠀⠀⠀⠻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⠀⠀⠀⠀⠀
			⠀⠀⠀⠀⠀⣶⣤⣈⡉⠛⠛⠻⠿⠿⠿⠿⠿⠿⠟⠛⠛⢉⣁⣤⣶⠀⠀⠀⠀⠀
			⠀⠀⠀⠀⠀⣿⣿⣿⣿⣿⣷⣶⣶⣶⣶⣶⣶⣶⣶⣾⣿⣿⣿⣿⣿⠀⠀⠀⠀⠀
			⠀⠀⠀⠀⠀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀⠀
			⠀⠀⠀⠀⠀⠙⠻⠿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠿⠟⠋⠀⠀⠀⠀⠀
			⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠉⠉⠉⠛⠛⠛⠛⠉⠉⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀		                              
                                                              

															                                                                                                         
	- La definición de la base de datos es la fuente de toda nuestra información, que nos brindará todos los datos que necesitamos para trabajar el Back, y posteriormente pintarlo en el Front.
	
	
	
                                                                                            
 _____ ____     _    ____    _       _   _    _   _ ____   ___    _____ _   _   _____ _     
|_   _|  _ \   / \  | __ )  / \     | | / \  | \ | |  _ \ / _ \  | ____| \ | | | ____| |    
  | | | |_) | / _ \ |  _ \ / _ \ _  | |/ _ \ |  \| | | | | | | | |  _| |  \| | |  _| | |    
  | | |  _ < / ___ \| |_) / ___ | |_| / ___ \| |\  | |_| | |_| | | |___| |\  | | |___| |___ 
  |_| |_| \_/_/   \_|____/_/   \_\___/_/   \_|_| \_|____/ \___/  |_____|_| \_| |_____|_____|
                                                                                            
                                                                                            
 ____ ___ ____  _____ ____ _____ ___  ____  ___ ___    ____  _____                          
|  _ |_ _|  _ \| ____/ ___|_   _/ _ \|  _ \|_ _/ _ \  |  _ \| ____|                         
| | | | || |_) |  _|| |     | || | | | |_) || | | | | | | | |  _|                           
| |_| | ||  _ <| |__| |___  | || |_| |  _ < | | |_| | | |_| | |___                          
|____|___|_| \_|_____\____| |_| \___/|_| \_|___\___/  |____/|_____|                         
                                                                                            
                                                                                            
 ____    _    ____  _____ ____    ____  _____   ____    _  _____ ___  ____                  
| __ )  / \  / ___|| ____/ ___|  |  _ \| ____| |  _ \  / \|_   _/ _ \/ ___|                 
|  _ \ / _ \ \___ \|  _| \___ \  | | | |  _|   | | | |/ _ \ | || | | \___ \                 
| |_) / ___ \ ___) | |___ ___) | | |_| | |___  | |_| / ___ \| || |_| |___) |                
|____/_/   \_|____/|_____|____/  |____/|_____| |____/_/   \_|_| \___/|____/                 
                                                                                            
                                                                                            
 _ _ ____    _  _____  _    ____    _    ____  _____ ____ _ _                               
( | |  _ \  / \|_   _|/ \  | __ )  / \  / ___|| ____/ ___( | )                              
 V V| | | |/ _ \ | | / _ \ |  _ \ / _ \ \___ \|  _| \___ \V V                               
    | |_| / ___ \| |/ ___ \| |_) / ___ \ ___) | |___ ___) |                                 
    |____/_/   \_|_/_/   \_|____/_/   \_|____/|_____|____/                                  
                                                                                            

	
	- ¿Cómo comenzar a trabajar la Base de Datos?
	
	
                                                                                                            
 ____  _____ _____ ___ _   _ ___ _____ _   _ ____   ___    _____ _        ___  ____      _ _____ _____ ___  
|  _ \| ____|  ___|_ _| \ | |_ _| ____| \ | |  _ \ / _ \  | ____| |      / _ \| __ )    | | ____|_   _/ _ \ 
| | | |  _| | |_   | ||  \| || ||  _| |  \| | | | | | | | |  _| | |     | | | |  _ \ _  | |  _|   | || | | |
| |_| | |___|  _|  | || |\  || || |___| |\  | |_| | |_| | | |___| |___  | |_| | |_) | |_| | |___  | || |_| |
|____/|_____|_|   |___|_| \_|___|_____|_| \_|____/ \___/  |_____|_____|  \___/|____/ \___/|_____| |_| \___/ 
                                                                                                            
                                                                                                            
 ____  _____ ___  _   _ _____ _     ___ __________                                                          
/ ___|| ____/ _ \| | | | ____| |   |_ _|__  | ____|                                                         
\___ \|  _|| | | | | | |  _| | |    | |  / /|  _|                                                           
 ___) | |__| |_| | |_| | |___| |___ | | / /_| |___                                                          
|____/|_____\__\_\\___/|_____|_____|___/____|_____|                                                         
                                                                                                            

	
		- Dentro de nuestra carpeta de Back, crear una carpeta (para ser ordenados) llamada BBDD, o Databases:
		PRIMERO - CREAR INSTANCIA DEL OBJETO SEQUELIZE:
			- Crear dentro nuestro primer archivo .js que será el que creará una instancia de Sequelize, llamado "db.js"
				- Dentro de este archivo, crear nuestra instancia de Sequelize, de la siguiente forma:
					
					// Importamos el módulo de Sequelieze de nuestra dependencia del package.json.

							import { Sequelieze } from "sequelize";

							// Creamos una instancia de Sequelieze a través de su constructor, para exportar.

							const sequelize = new Sequelieze(
								{
									dialect: "sqlite", // El dialecto es, de qué forma o "lenguaje" se creará y harán consultas sobre la BBDD. 
									storage: "./Back/Databases/db.sqlite" // Ésta es la dirección de nuestro directorio de adónde queremos guardar la BBDD que creemos.
								}
							);

							// Procedemos a exportar el objeto que iniciará la BBDD.

							export default sequelize; // NO NOS OLVIDEMOS DE ÉSTO, ES LO MÁS IMPORTANTE DE ESTE ARCHIVO.
							
			- Este objeto inicializador de la Base de Datos nos permitirá acceder en otros archivos a todas las ventajas que trae Sequelize a la hora de trabajar con BBDD.


	
  .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-  .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-
 / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \ / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \
`-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'    `-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'  

		
		
           ██████╗ █████╗ ███╗   ███╗██╗███╗   ██╗ ██████╗     ███████╗███████╗██╗     ██╗███████╗              
          ██╔════╝██╔══██╗████╗ ████║██║████╗  ██║██╔═══██╗    ██╔════╝██╔════╝██║     ██║╚══███╔╝              
█████╗    ██║     ███████║██╔████╔██║██║██╔██╗ ██║██║   ██║    █████╗  █████╗  ██║     ██║  ███╔╝     █████╗    
╚════╝    ██║     ██╔══██║██║╚██╔╝██║██║██║╚██╗██║██║   ██║    ██╔══╝  ██╔══╝  ██║     ██║ ███╔╝      ╚════╝    
          ╚██████╗██║  ██║██║ ╚═╝ ██║██║██║ ╚████║╚██████╔╝    ██║     ███████╗███████╗██║███████╗              
           ╚═════╝╚═╝  ╚═╝╚═╝     ╚═╝╚═╝╚═╝  ╚═══╝ ╚═════╝     ╚═╝     ╚══════╝╚══════╝╚═╝╚══════╝              
                                                                                                                

		
███████╗██╗    ███╗   ██╗ ██████╗ ███████╗    ██████╗  █████╗ ███╗   ██╗    ██╗      █████╗     ██████╗ ██████╗ ██████╗ ██████╗                              
██╔════╝██║    ████╗  ██║██╔═══██╗██╔════╝    ██╔══██╗██╔══██╗████╗  ██║    ██║     ██╔══██╗    ██╔══██╗██╔══██╗██╔══██╗██╔══██╗                             
███████╗██║    ██╔██╗ ██║██║   ██║███████╗    ██║  ██║███████║██╔██╗ ██║    ██║     ███████║    ██████╔╝██████╔╝██║  ██║██║  ██║                             
╚════██║██║    ██║╚██╗██║██║   ██║╚════██║    ██║  ██║██╔══██║██║╚██╗██║    ██║     ██╔══██║    ██╔══██╗██╔══██╗██║  ██║██║  ██║                             
███████║██║    ██║ ╚████║╚██████╔╝███████║    ██████╔╝██║  ██║██║ ╚████║    ███████╗██║  ██║    ██████╔╝██████╔╝██████╔╝██████╔╝██╗██╗██╗                    
╚══════╝╚═╝    ╚═╝  ╚═══╝ ╚═════╝ ╚══════╝    ╚═════╝ ╚═╝  ╚═╝╚═╝  ╚═══╝    ╚══════╝╚═╝  ╚═╝    ╚═════╝ ╚═════╝ ╚═════╝ ╚═════╝ ╚═╝╚═╝╚═╝                    
                                                                                                                                                             
██╗   ██╗████████╗██╗██╗     ██╗███████╗ █████╗ ███╗   ███╗ ██████╗ ███████╗    ██╗      █████╗     ███████╗██╗   ██╗███╗   ██╗ ██████╗██╗ ██████╗ ███╗   ██╗
██║   ██║╚══██╔══╝██║██║     ██║╚══███╔╝██╔══██╗████╗ ████║██╔═══██╗██╔════╝    ██║     ██╔══██╗    ██╔════╝██║   ██║████╗  ██║██╔════╝██║██╔═══██╗████╗  ██║
██║   ██║   ██║   ██║██║     ██║  ███╔╝ ███████║██╔████╔██║██║   ██║███████╗    ██║     ███████║    █████╗  ██║   ██║██╔██╗ ██║██║     ██║██║   ██║██╔██╗ ██║
██║   ██║   ██║   ██║██║     ██║ ███╔╝  ██╔══██║██║╚██╔╝██║██║   ██║╚════██║    ██║     ██╔══██║    ██╔══╝  ██║   ██║██║╚██╗██║██║     ██║██║   ██║██║╚██╗██║
╚██████╔╝   ██║   ██║███████╗██║███████╗██║  ██║██║ ╚═╝ ██║╚██████╔╝███████║    ███████╗██║  ██║    ██║     ╚██████╔╝██║ ╚████║╚██████╗██║╚██████╔╝██║ ╚████║
 ╚═════╝    ╚═╝   ╚═╝╚══════╝╚═╝╚══════╝╚═╝  ╚═╝╚═╝     ╚═╝ ╚═════╝ ╚══════╝    ╚══════╝╚═╝  ╚═╝    ╚═╝      ╚═════╝ ╚═╝  ╚═══╝ ╚═════╝╚═╝ ╚═════╝ ╚═╝  ╚═══╝
                                                                                                                                                             
██████╗ ██████╗ ██╗███╗   ██╗██╗████████╗ ██╗██╗                                                                                                             
██╔══██╗██╔══██╗██║████╗  ██║██║╚══██╔══╝██╔╝╚██╗                                                                                                            
██║  ██║██████╔╝██║██╔██╗ ██║██║   ██║   ██║  ██║                                                                                                            
██║  ██║██╔══██╗██║██║╚██╗██║██║   ██║   ██║  ██║                                                                                                            
██████╔╝██████╔╝██║██║ ╚████║██║   ██║   ╚██╗██╔╝                                                                                                            
╚═════╝ ╚═════╝ ╚═╝╚═╝  ╚═══╝╚═╝   ╚═╝    ╚═╝╚═╝                                                                                                             
                                                                                                                                                             

		
		SEGUNDO - CREAR FUNCIÓN DE INICIO Y CONEXIÓN CON LA BASE DE DATOS:
			- Creamos otro archivo, dentro de la carpeta de base de datos (en mi caso particular, llamada BBDD, puede tener cualquier nombre, pero mantener la consistencia). Este archivo se llamará "db-init.js", ya que inicializará la BBDD:
				- Dentro de este archivo, haremos las siguientes cosas (importante seguir la secuencia, por cómo se interpreta el lenguaje de JS):
					- PRIMERO: Importaremos el objeto instanciado de Sequelize del punto anterior, es decir, tendremos que codificar lo siguiente:
						
						// Primeramente, importamos nuestro objeto instanciado de la BBDD que creamos en "db.js":

							import { sequelize } from "./db.js"; // Observar que con ./ ésto haciendo referencia a que me paro en el directorio actual. Recordar de SOP.
							
					- SEGUNDO: Dejaremos IMPORTADOS (todavía no los creamos, eso será en el siguiente paso) los modelos/entidades que nos servirán para construir la Base de Datos:
					- NOTA*: Recordar de DSI que una Clase Entity/Entidad es aquella la cuál es candidata a poder ser almacenada en una BBDD. Lo mismo pasa acá. 
			
						// Segundo, dejaremos los importes pendientes a los modelos/entidades de nuestra lógica de negocios, que tendrán que estar obligadamente (por un tema de consistencia) en la carpeta de Models.

							import { Cliente } from "./Models/clientes.js" // Si el archivo no existía antes, se crea automáticamente.
							
					- TERCERO - MUY IMPORTANTE: Crearemos la función que nos permitirá autenticar y sincronizar la Base de Datos. Ésto se hace con motivo de que como en JS todas éstas operaciones son asíncronas, tenga que sincronizarse a los últimos cambios que hagamos.
						
			
			
						// Tercero y por último en éste punto, creamos la función de autenticación y sincronización. Recordar que todas éstas funciones que trabajan sobre una BBDD o una API son asíncronas y en su encabezado debe llevar la palabra reservada "async".

						const dbInit = async () => {

							try {

								// Autenticamos... recordar que todo lo que hagmos sobre una BBDD, o una API, es asíncrono, por lo tanto cada respuesta u operación lleva la palabra reservada "await".
								// con el método .authenticate() del objeto sequelize importado.

								await sequelize.authenticate();

								// Sincronizamos - con el método sync() del objeto sequelize importado.

								await sequelize.sync();

							} catch ( error ) {

								console.log("Error sincronizando con la BBDD: " + error);

							}

						}
						
						export default dbInit; // NO NOS OLVIDEMOS DE ÉSTO, ES LO MÁS IMPORTANTE DE ESTE ARCHIVO.
						
	FAQ (Preguntas Frecuentes):
	- P: He creado los archivos con la estructura propuesta, pero no tengo todavía el archivo de la Base de Datos. ¿Tengo que crearlo?
	- R: No. El archivo de BBDD lo crearemos utilizando la herramienta de mockaroo. Ver tercera pregunta para ver cómo. Con su función creadora se crea automáticamente.
	
	- P: ¿Qué es la función dbInit? ¿Puede llevar otro nombre?
	- R: Es la función que creamos que nos permite además de sincronizar y autenticar la BBDD, nos permite conectarnos a ella. Puede llevar cualquier nombre, pero
	es importante recalcar que siempre que creemos una función de éstas características tendremos que exportarla para que nuestro archivo principal ("app.js") pueda usarlo.
	
	- P: ¿Cómo puedo crear mis propias tablas y practicar con cualquier ejercicio autopropuesto?
	- R: Para practicar con tablas de prueba, usar https://www.mockaroo.com/ , y generar un archivo en formato SQL, tildando la casilla de include CREATE TABLE.
		Si queremos practicar y/o NO NOS DAN una Base de Datos, ver el apartado de "Camino Complicado". La función creadora del archivo "db-mockaroo.js" una vez se invoque,
		crea automáticamente la BBDD.


███████╗███████╗████████╗ ██████╗     ███████╗███████╗    ██╗      ██████╗     ███╗   ███╗ █████╗ ███████╗                         
██╔════╝██╔════╝╚══██╔══╝██╔═══██╗    ██╔════╝██╔════╝    ██║     ██╔═══██╗    ████╗ ████║██╔══██╗██╔════╝                         
█████╗  ███████╗   ██║   ██║   ██║    █████╗  ███████╗    ██║     ██║   ██║    ██╔████╔██║███████║███████╗                         
██╔══╝  ╚════██║   ██║   ██║   ██║    ██╔══╝  ╚════██║    ██║     ██║   ██║    ██║╚██╔╝██║██╔══██║╚════██║                         
███████╗███████║   ██║   ╚██████╔╝    ███████╗███████║    ███████╗╚██████╔╝    ██║ ╚═╝ ██║██║  ██║███████║                         
╚══════╝╚══════╝   ╚═╝    ╚═════╝     ╚══════╝╚══════╝    ╚══════╝ ╚═════╝     ╚═╝     ╚═╝╚═╝  ╚═╝╚══════╝                         
                                                                                                                                   
██████╗ ██████╗  ██████╗ ██████╗  █████╗ ██████╗ ██╗     ███████╗     ██████╗ ██╗   ██╗███████╗    ██████╗  █████╗ ███████╗███████╗
██╔══██╗██╔══██╗██╔═══██╗██╔══██╗██╔══██╗██╔══██╗██║     ██╔════╝    ██╔═══██╗██║   ██║██╔════╝    ██╔══██╗██╔══██╗██╔════╝██╔════╝
██████╔╝██████╔╝██║   ██║██████╔╝███████║██████╔╝██║     █████╗      ██║   ██║██║   ██║█████╗      ██████╔╝███████║███████╗█████╗  
██╔═══╝ ██╔══██╗██║   ██║██╔══██╗██╔══██║██╔══██╗██║     ██╔══╝      ██║▄▄ ██║██║   ██║██╔══╝      ██╔═══╝ ██╔══██║╚════██║██╔══╝  
██║     ██║  ██║╚██████╔╝██████╔╝██║  ██║██████╔╝███████╗███████╗    ╚██████╔╝╚██████╔╝███████╗    ██║     ██║  ██║███████║███████╗
╚═╝     ╚═╝  ╚═╝ ╚═════╝ ╚═════╝ ╚═╝  ╚═╝╚═════╝ ╚══════╝╚══════╝     ╚══▀▀═╝  ╚═════╝ ╚══════╝    ╚═╝     ╚═╝  ╚═╝╚══════╝╚══════╝
                                                                                                                                   
																																   
																																   
 ██████╗ ██╗   ██╗███████╗    ███╗   ██╗ ██████╗ ███████╗    ██████╗ ███████╗███╗   ██╗    ██╗      █████╗     ██████╗ ██████╗ ██████╗ ██████╗ 
██╔═══██╗██║   ██║██╔════╝    ████╗  ██║██╔═══██╗██╔════╝    ██╔══██╗██╔════╝████╗  ██║    ██║     ██╔══██╗    ██╔══██╗██╔══██╗██╔══██╗██╔══██╗
██║   ██║██║   ██║█████╗      ██╔██╗ ██║██║   ██║███████╗    ██║  ██║█████╗  ██╔██╗ ██║    ██║     ███████║    ██████╔╝██████╔╝██║  ██║██║  ██║
██║▄▄ ██║██║   ██║██╔══╝      ██║╚██╗██║██║   ██║╚════██║    ██║  ██║██╔══╝  ██║╚██╗██║    ██║     ██╔══██║    ██╔══██╗██╔══██╗██║  ██║██║  ██║
╚██████╔╝╚██████╔╝███████╗    ██║ ╚████║╚██████╔╝███████║    ██████╔╝███████╗██║ ╚████║    ███████╗██║  ██║    ██████╔╝██████╔╝██████╔╝██████╔╝
 ╚══▀▀═╝  ╚═════╝ ╚══════╝    ╚═╝  ╚═══╝ ╚═════╝ ╚══════╝    ╚═════╝ ╚══════╝╚═╝  ╚═══╝    ╚══════╝╚═╝  ╚═╝    ╚═════╝ ╚═════╝ ╚═════╝ ╚═════╝ 
                                                                                                                                               
██╗   ██╗    ████████╗███████╗███╗   ██╗ ██████╗  █████╗ ███╗   ███╗ ██████╗ ███████╗     ██████╗ ██╗   ██╗███████╗                            
╚██╗ ██╔╝    ╚══██╔══╝██╔════╝████╗  ██║██╔════╝ ██╔══██╗████╗ ████║██╔═══██╗██╔════╝    ██╔═══██╗██║   ██║██╔════╝                            
 ╚████╔╝        ██║   █████╗  ██╔██╗ ██║██║  ███╗███████║██╔████╔██║██║   ██║███████╗    ██║   ██║██║   ██║█████╗                              
  ╚██╔╝         ██║   ██╔══╝  ██║╚██╗██║██║   ██║██╔══██║██║╚██╔╝██║██║   ██║╚════██║    ██║▄▄ ██║██║   ██║██╔══╝                              
   ██║          ██║   ███████╗██║ ╚████║╚██████╔╝██║  ██║██║ ╚═╝ ██║╚██████╔╝███████║    ╚██████╔╝╚██████╔╝███████╗                            
   ╚═╝          ╚═╝   ╚══════╝╚═╝  ╚═══╝ ╚═════╝ ╚═╝  ╚═╝╚═╝     ╚═╝ ╚═════╝ ╚══════╝     ╚══▀▀═╝  ╚═════╝ ╚══════╝                            
                                                                                                                                               
██╗  ██╗ █████╗  ██████╗███████╗██████╗     ███████╗███████╗████████╗ █████╗     ███████╗██╗   ██╗███╗   ██╗ ██████╗██╗ ██████╗ ███╗   ██╗     
██║  ██║██╔══██╗██╔════╝██╔════╝██╔══██╗    ██╔════╝██╔════╝╚══██╔══╝██╔══██╗    ██╔════╝██║   ██║████╗  ██║██╔════╝██║██╔═══██╗████╗  ██║     
███████║███████║██║     █████╗  ██████╔╝    █████╗  ███████╗   ██║   ███████║    █████╗  ██║   ██║██╔██╗ ██║██║     ██║██║   ██║██╔██╗ ██║     
██╔══██║██╔══██║██║     ██╔══╝  ██╔══██╗    ██╔══╝  ╚════██║   ██║   ██╔══██║    ██╔══╝  ██║   ██║██║╚██╗██║██║     ██║██║   ██║██║╚██╗██║     
██║  ██║██║  ██║╚██████╗███████╗██║  ██║    ███████╗███████║   ██║   ██║  ██║    ██║     ╚██████╔╝██║ ╚████║╚██████╗██║╚██████╔╝██║ ╚████║     
╚═╝  ╚═╝╚═╝  ╚═╝ ╚═════╝╚══════╝╚═╝  ╚═╝    ╚══════╝╚══════╝   ╚═╝   ╚═╝  ╚═╝    ╚═╝      ╚═════╝ ╚═╝  ╚═══╝ ╚═════╝╚═╝ ╚═════╝ ╚═╝  ╚═══╝     
                                                                                                                                               


	
  .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-  .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-
 / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \ / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \
`-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'    `-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'  

                                                                                                            
  ____ ____  _____    _    _   _ ____   ___    _     ___  ____    __  __  ___  ____  _____ _     ___  ____  
 / ___|  _ \| ____|  / \  | \ | |  _ \ / _ \  | |   / _ \/ ___|  |  \/  |/ _ \|  _ \| ____| |   / _ \/ ___| 
| |   | |_) |  _|   / _ \ |  \| | | | | | | | | |  | | | \___ \  | |\/| | | | | | | |  _| | |  | | | \___ \ 
| |___|  _ <| |___ / ___ \| |\  | |_| | |_| | | |__| |_| |___) | | |  | | |_| | |_| | |___| |__| |_| |___) |
 \____|_| \_|_____/_/   \_|_| \_|____/ \___/  |_____\___/|____/  |_|  |_|\___/|____/|_____|_____\___/|____/ 
                                                                                                            
                                                                                                            
  _______ _   _ _____ ___ _____ ___ _____ ______    ____  _____   ____    _  _____ ___  ____                
 / | ____| \ | |_   _|_ _|_   _|_ _| ____/ ___\ \  |  _ \| ____| |  _ \  / \|_   _/ _ \/ ___|               
| ||  _| |  \| | | |  | |  | |  | ||  _| \___ \| | | | | |  _|   | | | |/ _ \ | || | | \___ \   _____       
| || |___| |\  | | |  | |  | |  | || |___ ___) | | | |_| | |___  | |_| / ___ \| || |_| |___) | |_____|      
| ||_____|_| \_| |_| |___| |_| |___|_____|____/| | |____/|_____| |____/_/   \_|_| \___/|____/               
 \_\                                          /_/                                                           
                                                                                                            
 ____  _____ ___  _   _ _____ _     ___ __________    ____ ___  __  __  ___     ___  ____  __  __           
/ ___|| ____/ _ \| | | | ____| |   |_ _|__  | ____|  / ___/ _ \|  \/  |/ _ \   / _ \|  _ \|  \/  |          
\___ \|  _|| | | | | | |  _| | |    | |  / /|  _|   | |  | | | | |\/| | | | | | | | | |_) | |\/| |          
 ___) | |__| |_| | |_| | |___| |___ | | / /_| |___  | |__| |_| | |  | | |_| | | |_| |  _ <| |  | |          
|____/|_____\__\_\\___/|_____|_____|___/____|_____|  \____\___/|_|  |_|\___/   \___/|_| \_|_|  |_|          
                                                                                                            





                                                                                                          
 _____ ____     _    ____    _       _   _    _   _ ____   ___    _____ _   _   _____ _                   
|_   _|  _ \   / \  | __ )  / \     | | / \  | \ | |  _ \ / _ \  | ____| \ | | | ____| |                  
  | | | |_) | / _ \ |  _ \ / _ \ _  | |/ _ \ |  \| | | | | | | | |  _| |  \| | |  _| | |                  
  | | |  _ < / ___ \| |_) / ___ | |_| / ___ \| |\  | |_| | |_| | | |___| |\  | | |___| |___               
  |_| |_| \_/_/   \_|____/_/   \_\___/_/   \_|_| \_|____/ \___/  |_____|_| \_| |_____|_____|              
                                                                                                          
                                                                                                          
 ____ ___ ____  _____ ____ _____ ___  ____  ___ ___    ____  _____                                        
|  _ |_ _|  _ \| ____/ ___|_   _/ _ \|  _ \|_ _/ _ \  |  _ \| ____|                                       
| | | | || |_) |  _|| |     | || | | | |_) || | | | | | | | |  _|                                         
| |_| | ||  _ <| |__| |___  | || |_| |  _ < | | |_| | | |_| | |___                                        
|____|___|_| \_|_____\____| |_| \___/|_| \_|___\___/  |____/|_____|                                       
                                                                                                          
                                                                                                          
 _____ _   _ _____ ___ ____    _    ____  _____ ____     ___    __  __  ___  ____  _____ _     ___  ____  
| ____| \ | |_   _|_ _|  _ \  / \  |  _ \| ____/ ___|   / _ \  |  \/  |/ _ \|  _ \| ____| |   / _ \/ ___| 
|  _| |  \| | | |  | || | | |/ _ \ | | | |  _| \___ \  | | | | | |\/| | | | | | | |  _| | |  | | | \___ \ 
| |___| |\  | | |  | || |_| / ___ \| |_| | |___ ___) | | |_| | | |  | | |_| | |_| | |___| |__| |_| |___) |
|_____|_| \_| |_| |___|____/_/   \_|____/|_____|____/   \___/  |_|  |_|\___/|____/|_____|_____\___/|____/ 
                                                                                                          
                                                                                                          
 _ _ __  __  ___  ____  _____ _     ____ _ _                                                              
( | |  \/  |/ _ \|  _ \| ____| |   / ___( | )                                                             
 V V| |\/| | | | | | | |  _| | |   \___ \V V                                                              
    | |  | | |_| | |_| | |___| |___ ___) |                                                                
    |_|  |_|\___/|____/|_____|_____|____/                                                                 
                                                                                                          
						_-_.
					 _-',^. `-_.		
				 ._-' ,'   `.   `-_ 
				!`-_._________`-':::
				!   /\        /\::::
				;  /  \      /..\:::
				! /    \    /....\::
				!/      \  /......\:
				;--.___. \/_.__.--;; 
				 '-_    `:!;;;;;;;'
					`-_, :!;;;''
						`-!'         POO
						
			
		- Seguimos trabajando en el directorio de Back, pero ahora nos enfocaremos en crear los modelos/entidades necesarias para seguir trabajando.
			- ¿Por qué debemos de trabajar creando modelos? Porque necesitaremos de la herramienta de mapeado de objetos relacionales (ORM) que ofrece Sequelize.
			Sin ésto, no podremos conectar de manera <<eficiente y fácil>> nuestro Backend con la Base de Datos (hay otras formas de hacerlo pero requieren muchas más líneas de código, y no lo hemos visto en la materia.
			
		TERCERO - CREAMOS LA DEFINICIÓN DE NUESTRA ENTIDAD O MODELO:
		- Para ello, nos ubicaremos dentro de nuestra carpeta de Modelos (o Entidades) y crearemos un archivo con la siguiente nomenclatura: <nombreEntidad>.js, en donde <nombreEntidad> puede ser CUALQUIER ENTIDAD O MODELO que queramos que persista en nuestra BBDD.
			- En este ejemplo en particular, lo llamaremos "clientes.js" ya que venimos atendiendo a una consigna de una tabla de Clientes.
				- Dentro de éste archivo, haremos lo siguiente:
					- PRIMERO: Importamos el objeto instanciado de Sequelize, que es el que tiene todas las operaciones y métodos para definir nuestro modelo:
					
						// Éste es nuestro código relacionado al Modelo/Entidad de Clientes, deberemos hacer una serie de operaciones o líneas de código para tratarlo y que podamos guardar satisfactoriamente los datos de ello.

						// Primer paso: Importamos nuestro objeto "sequelize", que tenemos en "db.js";

						import { sequelize } from "../db.js"  
						
					- SEGUNDO: Creamos la definición de nuestro modelo "Cliente": Para ello, usaremos el método .define() de nuestro objeto sequelize, importado en el punto anterior.
					
						// Segundo paso: Empezamos a definir nuestra entidad Cliente con el método .define() del objeto importado sequelize.

						// La sintaxis para poder crear una definición de un modelo, es la siguiente:
						
						// const Modelo = sequelize.define({"NombreModeloParaLaTabla", { atributos }, { opciones })
						// Ésta sintaxis puede verse como "Calling" en: https://sequelize.org/docs/v6/core-concepts/model-basics/
						
						// En donde:
							// NombreModeloParaLaTabla es el nombre que nuestro modelo.
							// { atributos } es el objeto de JavaScript que tendrá TODOS los atributos (par clave-valor) que identificarán a nuestra columna.
							// { opciones } en donde se tendrá que especificar que NO QUEREMOS EL ATRIBUTO TIMESTAMPS ("timestamps: false") y pondremos
							// el nombre que tendrá en la tabla (Ejemplo: "tableName: CLIENTES").

						const Cliente = sequelize.define({

							// Aquí va el resto del código que haremos en el TERCER paso.

						})
						
						export default Cliente;
						
					- TERCERO: Configuramos los atributos de nuestro modelo "Cliente", siguiendo las convenciones de todo objeto JavaScript (clave-valor):
					
						import { sequelize } from "../db.js"  
						
						import DataTypes from "sequelize";
					
						const Cliente = sequelize.define("CLIENTES", // Nombre de la Tabla

						// Acá van los { atributos }; recordar que la sintaxis es nombreAtributo: { configuracionesAtributo }
						// Haremos que nuestro Cliente tenga los siguientes atributos:
						// { idCliente, nombre, apellido, fechaAfiliacion, premium }

						{
							idCliente: {
								type: DataTypes.INTEGER, // Mi iDCliente será de tipo ENTERO
								primaryKey: true, // Quiero que sea la PK de mi Tabla "CLIENTES"
								autoIncrement: true, // Quiero que sea autoincremental
								field: "ID_CLIENTE",
								unique: true // Es el nombre que tendrá el atributo idCliente en la Tabla "CLIENTES",
							},
							nombre: {
								type: DataTypes.STRING(100), // Quiero que éste atributo sea un STRING de hasta 100 carácteres
								allowNull: false, // NO LE PERMITO QUE ESTÉ VACÍO EN MI BBDD
								field: "NOMBRE_CLIENTE" // Es el nombre que tendrá el atributo nombre en la Tabla "CLIENTES"
							},
							apellido: {
								type: DataTypes.STRING(100),
								allowNull: false,
								field: "APELLIDO_CLIENTE"
							},
							fechaAfiliacion: {
								type: DataTypes.DATEONLY, // DATEONLY sólo fechas, o DATE que es fecha y hora.
								allowNull: false,
								field: "FECHA_AFILIACION"
							},
							premium: {
								type: DataTypes.BOOLEAN, // Valor de tipo BOOLEANO, si es PREMIUM === TRUE, sino, PREMIUM === FALSE
								allowNull: false,
								field: "ES_CLIENTE_PREMIUM"
							}
						},

						// Acá van las { opciones }; recordar que la sintaxis es nombreOpcion: { configuracionesOpcion }

						{
							"timestamps": false, // NO QUEREMOS ATRIBUTOS AUTOGENERADOS DE TIEMPO DE CREACIÓN
							"tableName": "CLIENTES" // QUEREMOS FORZAR A QUE LA TABLA SE LLAME CLIENTES EN LA BBDD
						});

						export default Cliente;
						
				Trabajaremos así sucesivamente, para cada MODEL o ENTITY solicitado en el ejercicio (creando un archivo nuevo para cada uno).


	
  .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-  .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-
 / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \ / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \
`-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'    `-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'  


           ██████╗ █████╗ ███╗   ███╗██╗███╗   ██╗ ██████╗      ██████╗ ██████╗ ███╗   ███╗██████╗ ██╗     ██╗ ██████╗ █████╗ ██████╗  ██████╗               
          ██╔════╝██╔══██╗████╗ ████║██║████╗  ██║██╔═══██╗    ██╔════╝██╔═══██╗████╗ ████║██╔══██╗██║     ██║██╔════╝██╔══██╗██╔══██╗██╔═══██╗              
█████╗    ██║     ███████║██╔████╔██║██║██╔██╗ ██║██║   ██║    ██║     ██║   ██║██╔████╔██║██████╔╝██║     ██║██║     ███████║██║  ██║██║   ██║    █████╗    
╚════╝    ██║     ██╔══██║██║╚██╔╝██║██║██║╚██╗██║██║   ██║    ██║     ██║   ██║██║╚██╔╝██║██╔═══╝ ██║     ██║██║     ██╔══██║██║  ██║██║   ██║    ╚════╝    
          ╚██████╗██║  ██║██║ ╚═╝ ██║██║██║ ╚████║╚██████╔╝    ╚██████╗╚██████╔╝██║ ╚═╝ ██║██║     ███████╗██║╚██████╗██║  ██║██████╔╝╚██████╔╝              
           ╚═════╝╚═╝  ╚═╝╚═╝     ╚═╝╚═╝╚═╝  ╚═══╝ ╚═════╝      ╚═════╝ ╚═════╝ ╚═╝     ╚═╝╚═╝     ╚══════╝╚═╝ ╚═════╝╚═╝  ╚═╝╚═════╝  ╚═════╝               
                                                                                                                                                             

							
███████╗██╗    ███╗   ██╗ ██████╗     ███╗   ██╗ ██████╗ ███████╗    ██████╗  █████╗ ███╗   ██╗    ██╗      █████╗     ██████╗ ██████╗ ██████╗ ██████╗          
██╔════╝██║    ████╗  ██║██╔═══██╗    ████╗  ██║██╔═══██╗██╔════╝    ██╔══██╗██╔══██╗████╗  ██║    ██║     ██╔══██╗    ██╔══██╗██╔══██╗██╔══██╗██╔══██╗         
███████╗██║    ██╔██╗ ██║██║   ██║    ██╔██╗ ██║██║   ██║███████╗    ██║  ██║███████║██╔██╗ ██║    ██║     ███████║    ██████╔╝██████╔╝██║  ██║██║  ██║         
╚════██║██║    ██║╚██╗██║██║   ██║    ██║╚██╗██║██║   ██║╚════██║    ██║  ██║██╔══██║██║╚██╗██║    ██║     ██╔══██║    ██╔══██╗██╔══██╗██║  ██║██║  ██║         
███████║██║    ██║ ╚████║╚██████╔╝    ██║ ╚████║╚██████╔╝███████║    ██████╔╝██║  ██║██║ ╚████║    ███████╗██║  ██║    ██████╔╝██████╔╝██████╔╝██████╔╝██╗██╗██╗
╚══════╝╚═╝    ╚═╝  ╚═══╝ ╚═════╝     ╚═╝  ╚═══╝ ╚═════╝ ╚══════╝    ╚═════╝ ╚═╝  ╚═╝╚═╝  ╚═══╝    ╚══════╝╚═╝  ╚═╝    ╚═════╝ ╚═════╝ ╚═════╝ ╚═════╝ ╚═╝╚═╝╚═╝
                                                                                                                                                                
██╗      █████╗      ██████╗██████╗ ███████╗ █████╗ ███╗   ███╗ ██████╗ ███████╗                                                                                
██║     ██╔══██╗    ██╔════╝██╔══██╗██╔════╝██╔══██╗████╗ ████║██╔═══██╗██╔════╝                                                                                
██║     ███████║    ██║     ██████╔╝█████╗  ███████║██╔████╔██║██║   ██║███████╗                                                                                
██║     ██╔══██║    ██║     ██╔══██╗██╔══╝  ██╔══██║██║╚██╔╝██║██║   ██║╚════██║                                                                                
███████╗██║  ██║    ╚██████╗██║  ██║███████╗██║  ██║██║ ╚═╝ ██║╚██████╔╝███████║                                                                                
╚══════╝╚═╝  ╚═╝     ╚═════╝╚═╝  ╚═╝╚══════╝╚═╝  ╚═╝╚═╝     ╚═╝ ╚═════╝ ╚══════╝                                                                                
                                                                                                                                                                

			NOTA*: Esto sucede cuando estamos practicando con BBDD propias, es decir, que tengamos que generar nosotros. Si los profes nos dan la BBDD,
			ver el apartado de "Camino Feliz".
				
				- CUARTO: Si no tenemos la BBDD todavía, ir a mockaroo y generarla (SI ES UN EJERCICIO DE PRÁCTICA), en el parcial UTILIZAR LA BRINDADA POR EL DOCENTE:
					- Para practicar en Mockaroo, se utilizó la siguiente estructura para crear la BBDD respectiva, que nos ofreció el servicio:
					
						create table CLIENTES (
							idCliente INT,
							nombre VARCHAR(100),
							apellido VARCHAR(100),
							fechaAfiliacion DATE,
							premium BOOLEAN
						);
						
						insert into CLIENTES (idCliente, nombre, apellido, fechaAfiliacion, premium) values (1, 'Dean', 'Swalough', '13/7/2023', true);
						insert into CLIENTES (idCliente, nombre, apellido, fechaAfiliacion, premium) values (2, 'Veronica', 'Wombwell', '28/5/2023', false);
						insert into CLIENTES (idCliente, nombre, apellido, fechaAfiliacion, premium) values (3, 'Keene', 'Breche', '22/10/2023', false);
						insert into CLIENTES (idCliente, nombre, apellido, fechaAfiliacion, premium) values (4, 'Kasper', 'Kettlewell', '17/9/2023', true);
						insert into CLIENTES (idCliente, nombre, apellido, fechaAfiliacion, premium) values (5, 'Zabrina', 'Burnhill', '16/11/2023', true);
						insert into CLIENTES (idCliente, nombre, apellido, fechaAfiliacion, premium) values (6, 'Noellyn', 'Kindle', '7/7/2023', false);
						insert into CLIENTES (idCliente, nombre, apellido, fechaAfiliacion, premium) values (7, 'Alec', 'Shilleto', '9/10/2023', true);
						insert into CLIENTES (idCliente, nombre, apellido, fechaAfiliacion, premium) values (8, 'Marley', 'Castane', '21/10/2023', false);
						insert into CLIENTES (idCliente, nombre, apellido, fechaAfiliacion, premium) values (9, 'Cissy', 'Brunton', '18/11/2023', false);
						insert into CLIENTES (idCliente, nombre, apellido, fechaAfiliacion, premium) values (10, 'Sindee', 'Callendar', '23/11/2023', false);
						insert into CLIENTES (idCliente, nombre, apellido, fechaAfiliacion, premium) values (11, 'Benny', 'Keyme', '19/5/2023', false);
						insert into CLIENTES (idCliente, nombre, apellido, fechaAfiliacion, premium) values (12, 'Vanessa', 'Broose', '6/10/2023', false);
						insert into CLIENTES (idCliente, nombre, apellido, fechaAfiliacion, premium) values (13, 'Gary', 'Pariso', '22/11/2023', false);
						insert into CLIENTES (idCliente, nombre, apellido, fechaAfiliacion, premium) values (14, 'Norris', 'Mariet', '26/6/2023', false);
						insert into CLIENTES (idCliente, nombre, apellido, fechaAfiliacion, premium) values (15, 'Marya', 'Tout', '25/2/2024', true);
						insert into CLIENTES (idCliente, nombre, apellido, fechaAfiliacion, premium) values (16, 'Ondrea', 'Snazel', '27/3/2024', false);
						insert into CLIENTES (idCliente, nombre, apellido, fechaAfiliacion, premium) values (17, 'Brandyn', 'Yurocjkin', '8/3/2024', true);
						insert into CLIENTES (idCliente, nombre, apellido, fechaAfiliacion, premium) values (18, 'Buddy', 'Sandaver', '21/7/2023', false);
						insert into CLIENTES (idCliente, nombre, apellido, fechaAfiliacion, premium) values (19, 'Goran', 'Brooking', '4/5/2023', false);
						insert into CLIENTES (idCliente, nombre, apellido, fechaAfiliacion, premium) values (20, 'Mollee', 'Jepensen', '8/5/2023', false);
					
					


███████╗██╗███╗   ██╗    ███████╗███╗   ███╗██████╗  █████╗ ██████╗  ██████╗  ██████╗         ██████╗ ██████╗ ███╗   ███╗ ██████╗                           
██╔════╝██║████╗  ██║    ██╔════╝████╗ ████║██╔══██╗██╔══██╗██╔══██╗██╔════╝ ██╔═══██╗       ██╔════╝██╔═══██╗████╗ ████║██╔═══██╗                          
███████╗██║██╔██╗ ██║    █████╗  ██╔████╔██║██████╔╝███████║██████╔╝██║  ███╗██║   ██║       ██║     ██║   ██║██╔████╔██║██║   ██║                          
╚════██║██║██║╚██╗██║    ██╔══╝  ██║╚██╔╝██║██╔══██╗██╔══██║██╔══██╗██║   ██║██║   ██║       ██║     ██║   ██║██║╚██╔╝██║██║   ██║                          
███████║██║██║ ╚████║    ███████╗██║ ╚═╝ ██║██████╔╝██║  ██║██║  ██║╚██████╔╝╚██████╔╝▄█╗    ╚██████╗╚██████╔╝██║ ╚═╝ ██║╚██████╔╝                          
╚══════╝╚═╝╚═╝  ╚═══╝    ╚══════╝╚═╝     ╚═╝╚═════╝ ╚═╝  ╚═╝╚═╝  ╚═╝ ╚═════╝  ╚═════╝ ╚═╝     ╚═════╝ ╚═════╝ ╚═╝     ╚═╝ ╚═════╝                           
                                                                                                                                                            
███████╗███████╗████████╗ █████╗ ███╗   ███╗ ██████╗ ███████╗     ██████╗██████╗ ███████╗ █████╗ ███╗   ██╗██████╗  ██████╗     ██╗   ██╗███╗   ██╗ █████╗  
██╔════╝██╔════╝╚══██╔══╝██╔══██╗████╗ ████║██╔═══██╗██╔════╝    ██╔════╝██╔══██╗██╔════╝██╔══██╗████╗  ██║██╔══██╗██╔═══██╗    ██║   ██║████╗  ██║██╔══██╗ 
█████╗  ███████╗   ██║   ███████║██╔████╔██║██║   ██║███████╗    ██║     ██████╔╝█████╗  ███████║██╔██╗ ██║██║  ██║██║   ██║    ██║   ██║██╔██╗ ██║███████║ 
██╔══╝  ╚════██║   ██║   ██╔══██║██║╚██╔╝██║██║   ██║╚════██║    ██║     ██╔══██╗██╔══╝  ██╔══██║██║╚██╗██║██║  ██║██║   ██║    ██║   ██║██║╚██╗██║██╔══██║ 
███████╗███████║   ██║   ██║  ██║██║ ╚═╝ ██║╚██████╔╝███████║    ╚██████╗██║  ██║███████╗██║  ██║██║ ╚████║██████╔╝╚██████╔╝    ╚██████╔╝██║ ╚████║██║  ██║ 
╚══════╝╚══════╝   ╚═╝   ╚═╝  ╚═╝╚═╝     ╚═╝ ╚═════╝ ╚══════╝     ╚═════╝╚═╝  ╚═╝╚══════╝╚═╝  ╚═╝╚═╝  ╚═══╝╚═════╝  ╚═════╝      ╚═════╝ ╚═╝  ╚═══╝╚═╝  ╚═╝ 
                                                                                                                                                            
██████╗ ██████╗ ██████╗ ██████╗     ██████╗ ███████╗███████╗██████╗ ███████╗     ██████╗███████╗██████╗  ██████╗                                            
██╔══██╗██╔══██╗██╔══██╗██╔══██╗    ██╔══██╗██╔════╝██╔════╝██╔══██╗██╔════╝    ██╔════╝██╔════╝██╔══██╗██╔═══██╗                                           
██████╔╝██████╔╝██║  ██║██║  ██║    ██║  ██║█████╗  ███████╗██║  ██║█████╗      ██║     █████╗  ██████╔╝██║   ██║                                           
██╔══██╗██╔══██╗██║  ██║██║  ██║    ██║  ██║██╔══╝  ╚════██║██║  ██║██╔══╝      ██║     ██╔══╝  ██╔══██╗██║   ██║                                           
██████╔╝██████╔╝██████╔╝██████╔╝    ██████╔╝███████╗███████║██████╔╝███████╗    ╚██████╗███████╗██║  ██║╚██████╔╝▄█╗                                        
╚═════╝ ╚═════╝ ╚═════╝ ╚═════╝     ╚═════╝ ╚══════╝╚══════╝╚═════╝ ╚══════╝     ╚═════╝╚══════╝╚═╝  ╚═╝ ╚═════╝ ╚═╝                                        
                                                                                                                                                            
 ██████╗██████╗ ███████╗ █████╗ ██████╗ ███████╗███╗   ███╗ ██████╗ ███████╗    ██╗   ██╗███╗   ██╗     █████╗ ██████╗  ██████╗██╗  ██╗██╗██╗   ██╗ ██████╗ 
██╔════╝██╔══██╗██╔════╝██╔══██╗██╔══██╗██╔════╝████╗ ████║██╔═══██╗██╔════╝    ██║   ██║████╗  ██║    ██╔══██╗██╔══██╗██╔════╝██║  ██║██║██║   ██║██╔═══██╗
██║     ██████╔╝█████╗  ███████║██████╔╝█████╗  ██╔████╔██║██║   ██║███████╗    ██║   ██║██╔██╗ ██║    ███████║██████╔╝██║     ███████║██║██║   ██║██║   ██║
██║     ██╔══██╗██╔══╝  ██╔══██║██╔══██╗██╔══╝  ██║╚██╔╝██║██║   ██║╚════██║    ██║   ██║██║╚██╗██║    ██╔══██║██╔══██╗██║     ██╔══██║██║╚██╗ ██╔╝██║   ██║
╚██████╗██║  ██║███████╗██║  ██║██║  ██║███████╗██║ ╚═╝ ██║╚██████╔╝███████║    ╚██████╔╝██║ ╚████║    ██║  ██║██║  ██║╚██████╗██║  ██║██║ ╚████╔╝ ╚██████╔╝
 ╚═════╝╚═╝  ╚═╝╚══════╝╚═╝  ╚═╝╚═╝  ╚═╝╚══════╝╚═╝     ╚═╝ ╚═════╝ ╚══════╝     ╚═════╝ ╚═╝  ╚═══╝    ╚═╝  ╚═╝╚═╝  ╚═╝ ╚═════╝╚═╝  ╚═╝╚═╝  ╚═══╝   ╚═════╝ 
                                                                                                                                                            
                                                

				Para poder seguir con el desarrollo de nuestra aplicación con Node.js, tendremos que crear un archivo que permita la creación
				de la BBDD personalizada y la inserción de una serie de registros de prueba.
					
				Proponemos llamar el archivo como "db-mockaroo.js" ya que los datos fueron sacados de una tabla generada en ese sitio, pero puede llamarse
				tranquilamente de cualquier otra forma. Lo importante es destacar que ES UNA BASE DE DATOS QUE NOSOTROS MISMOS CONFECCIONAMOS.
					
				SI NOS DAN LA BASE DE DATOS HECHA, NUEVAMENTE, FIJARSE EN LA SECCIÓN DE "CAMINO FELIZ". ÉSTO SOLO APLICARÁ PARA CUANDO NO NOS LA DEN.
				PORQUE TENEMOS QUE CONFIGURAR ALGUNAS COSAS MÁS.

				- En nuestro archivo "db-mockaroo.js", nos proponemos a crear nuestra BBDD personalizada, que usaremos para ir trabajando a lo largo
				del ejemplo de práctica (de esta manera se practica si no nos dan una BBDD. Ojo con eso):
				
						import sequelize from  "./db.js";

						// Ésta función se crea, si por casualidad NO TENEMOS LA BBDD y LA NECESITAMOS USAR EN UN EJERCICIO.
						// LO MÁS PROBABLE ES QUE EN EL DÍA DE LA EVALUACIÓN NOS LA DEN. PERO PARA PRACTICAR ES NECESARIO CREARLA.

						import Cliente from "../Models/clientes.js"

						const crearBaseDeDatosClientes = async () => {

							try {

								// VERIFICAMOS QUE LA TABLA NO EXISTA...

								const tablaExiste = await sequelize.getQueryInterface().showAllTables();
								const tablaClientesCreada = tablaExiste.includes('CLIENTES');


								if (!tablaClientesCreada) {

									await sequelize.sync();
									await Cliente.bulkCreate([

										// Como el idCliente es AUTOINCREMENTAL, no hace falta especificarlo...
										// Si lo hacemos, rompemos con una regla de unicidad de la PK.

										{ nombre: 'Dean', apellido: 'Swalough', fechaAfiliacion: '2023-07-13', premium: true },
										{ nombre: 'Veronica', apellido: 'Wombwell', fechaAfiliacion: '2023-05-28', premium: false },
										{ nombre: 'Keene', apellido: 'Breche', fechaAfiliacion: '2023-09-17', premium: false },
										{ nombre: 'Kasper', apellido: 'Kettlewell', fechaAfiliacion: '2023-09-17', premium: true },
										{ nombre: 'Zabrina', apellido: 'Burnhill', fechaAfiliacion: '2023-11-16', premium: true },
										{ nombre: 'Noellyn', apellido: 'Kindle', fechaAfiliacion: '2023-10-09', premium: false },
										{ nombre: 'Alec', apellido: 'Shilleto', fechaAfiliacion: '2023-10-21', premium: true },
										{ nombre: 'Marley', apellido: 'Castane', fechaAfiliacion: '2023-11-18', premium: false },
										{ nombre: 'Cissy', apellido: 'Brunton', fechaAfiliacion: '2023-11-23', premium: false },
										{ nombre: 'Sindee', apellido: 'Callendar', fechaAfiliacion: '2023-05-19', premium: false },
										{ nombre: 'Benny', apellido: 'Keyme', fechaAfiliacion: '2023-10-06', premium: false },
										{ nombre: 'Vanessa', apellido: 'Broose', fechaAfiliacion: '2023-11-22', premium: false },
										{ nombre: 'Gary', apellido: 'Pariso', fechaAfiliacion: '2023-06-26', premium: false },
										{ nombre: 'Norris', apellido: 'Mariet', fechaAfiliacion: '2024-02-25', premium: false },
										{ nombre: 'Marya', apellido: 'Tout', fechaAfiliacion: '2024-03-27', premium: true },
										{ nombre: 'Ondrea', apellido: 'Snazel', fechaAfiliacion: '2024-03-08', premium: false },
										{ nombre: 'Brandyn', apellido: 'Yurocjkin', fechaAfiliacion: '2023-07-21', premium: true },
										{ nombre: 'Buddy', apellido: 'Sandaver', fechaAfiliacion: '2023-05-04', premium: false },
										{ nombre: 'Goran', apellido: 'Brooking', fechaAfiliacion: '2023-05-08', premium: false },
										{ nombre: 'Mollee', apellido: 'Jepensen', fechaAfiliacion: '2023-05-08', premium: false }
									]);

								}

								console.log("Base de Datos CLIENTES creada EXITOSAMENTE");

							} catch ( error ) {

								console.log("BBDD no pudo ser creada, error: " + error);

							}

						}

						export default crearBaseDeDatosClientes;
				


					
  .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-  .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-
 / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \ / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \
`-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'    `-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'  
					
                                                                                        
 _____ ____     _    ____    _       _   _    _   _ ____   ___     ____ ___  _   _   _     ___  ____                                 
|_   _|  _ \   / \  | __ )  / \     | | / \  | \ | |  _ \ / _ \   / ___/ _ \| \ | | | |   / _ \/ ___|                                
  | | | |_) | / _ \ |  _ \ / _ \ _  | |/ _ \ |  \| | | | | | | | | |  | | | |  \| | | |  | | | \___ \                                
  | | |  _ < / ___ \| |_) / ___ | |_| / ___ \| |\  | |_| | |_| | | |__| |_| | |\  | | |__| |_| |___) |                               
  |_| |_| \_/_/   \_|____/_/   \_\___/_/   \_|_| \_|____/ \___/   \____\___/|_| \_| |_____\___/|____/                                
                                                                                                                                     
                                                                                                                                     
 ____  _____ ______     _____ ____ ___ ___  ____     _     ___     ___  _   _ _____                                                  
/ ___|| ____|  _ \ \   / |_ _/ ___|_ _/ _ \/ ___|_  | |   / _ \   / _ \| | | | ____|                                                 
\___ \|  _| | |_) \ \ / / | | |    | | | | \___ (_) | |  | | | | | | | | | | |  _|                                                   
 ___) | |___|  _ < \ V /  | | |___ | | |_| |___) _  | |__| |_| | | |_| | |_| | |___                                                  
|____/|_____|_| \_\ \_/  |___\____|___\___/|____(_) |_____\___/   \__\_\\___/|_____|                                                 
                                                                                                                                     
                                                                                                                                     
 ____  _______     _____  _ __     _______ ____     _       ____    _    ____    _      _____ _   _ ____  ____   ___ ___ _   _ _____ 
|  _ \| ____\ \   / / _ \| |\ \   / | ____|  _ \   / \     / ___|  / \  |  _ \  / \    | ____| \ | |  _ \|  _ \ / _ |_ _| \ | |_   _|
| | | |  _|  \ \ / | | | | | \ \ / /|  _| | |_) | / _ \   | |     / _ \ | | | |/ _ \   |  _| |  \| | | | | |_) | | | | ||  \| | | |  
| |_| | |___  \ V /| |_| | |__\ V / | |___|  _ < / ___ \  | |___ / ___ \| |_| / ___ \  | |___| |\  | |_| |  __/| |_| | || |\  | | |  
|____/|_____|  \_/  \___/|_____\_/  |_____|_| \_/_/   \_\  \____/_/   \_|____/_/   \_\ |_____|_| \_|____/|_|    \___|___|_| \_| |_|  
                                                                                                                                     

                                                                                 
																									 
																									 
									████████                                                         
								 ██████████████                                                      
							  ████████    ████████                                                   
						   ████████          ████████                                                
						████████                ████████                                             
					 ████████                      ████████                                          
					███████                          ███████                                         
					██████████                    ██████████                                         
					████ ████████              ████████ ████                                         
					████    ████████        ████████    ████                                         
					████       ████████  ████████       ████                                         
					████          ████████████          ████                                         
					████              ████              ████                  ███████                
					████              ████              ████               █████████████             
					████              ████              ████             █████       █████           
					████              ████              ████         ██████████     ███████████      
					████              ████           ██           ██████████  ███████  ███████████   
					██████            ████             ████ █  █████      ████   ██  ████      ██████
					 ████████         ████         █████  █████████        ████  ██ █████        ████
						████████      ████      ████████      ███ ████ ████  █████████  ████ ████ ███
						   ████████   ████   ████████         ███    ███    ████    ████   ███    ███
							  ████████████████████            ███     ██  ██           ███  ██    ███
								 ██████████████               ████    ██ ██ ████    ██████  ██   ████
									████████                   ██████ ██ ██    ██████   ██  ████████ 
																   ████████      ██     █████████    
																  █████████      ██     █████████    
															   █████      ████   ██   ███      ██████
															  █████        ██████████████        ████
															  ███ ████  ████ █████████  ███  ████ ███
															  ███    ███    ████    ████   ███    ███
															  ███     ██  ███          ███  ██    ███
															  ████    ██ ██ ███     ██████  ██   ████
															   ██████ █████    ██████   ███ ████████ 
																   ████████      ██     █████████    
																	  ██ ███     ██     ██ ███       
																		 ██████  ██  █████           
																			███████████              
																			   █████                 
																									 
																									 

			Una vez hayamos trabajado sobre la inicialización/conexión con la Base de Datos y la definición de los modelos,
			es momento de trabajar sobre lo que nuestro cliente (recordar arquitectura cliente-servidor) nos pedirá. Esa lógica de negocio
			suele compactarse con los servicios (los microservicios) que nuestra aplicación podrá brindar para cada endpoint distinto al que
			se acceda desde nuestro navegador Web.
			
			¿Qué servicios vamos a trabajar?
			
			1.) Uno que permita devolver a todos los clientes.
			2.) Uno que permita devolver a los clientes cumpliendo con un filtro (que su ID esté comprendido entre 5 y 15).
			3.) Uno que permita devolver ÚNICAMENTE el nombre y el apellido de los clientes.
			Para entender como son los filtros con Sequelize, consultar la documentación: https://sequelize.org/docs/v6/core-concepts/model-querying-basics/
			
			Para 2.) y 3.) usaremos dentro de nuestro <nombreModelo>.findAll() el valor where, que se usa para filtrar.
					const clientesFiltros = await Cliente.findAll(
						{
							where : {
								[idCliente.between] : [5,15]; // Los atributos se seleccionan con []
							}
						}
					)
					
			NOTA*: Los atributos se seleccionan entre corchetes. 
			
			Y un etcétera largo de servicios que nuestros endpoints podrán suplir. Pero en este ejemplo trabajaremos sobre los primeros tres.

			QUINTO - CREAMOS LOS SERVICIOS QUE SERÁN CONSUMIDOS POR NUESTRA APLICACIÓN.
			- Para empezar a crear los servicios necesarios para atender nuestras peticiones, deberemos situarnos sobre la carpeta de "Services",
			y adentro de ella crear un archivo llamado "<nombreModelo>.service.js". En este caso, hemos estado trabajando con el Modelo de Cliente,
			por lo que nuestro servicio se llamará: "clientes.service.js"
			
					// Empezaremos por importar el modelo que creamos, desde la carpeta de Models.

					import json from "sequelize";
					import Cliente from "../Models/clientes.js";
					import Op from "sequelize";

					// Seguiremos trabajando ahora con la definición de cada servicio. Un servicio se caracteriza
					// por estar asociado a una función, la cuál se llamará de acuerdo al endpoint que le pasemos
					// como argumento al ROUTING de nuestro archivo app.js

					// MICROSERVICIO - SELECCIÓN: CONSEGUIR TODOS LOS CLIENTES

					export const conseguirTodosLosClientes = async ( req, res ) => {

						// Como toda operación sobre una BBDD, o asíncrono, la englobamos en un try... catch...
						// El objetivo de los servicios es, operar sobre la res (respuesta) y modificar su atributo
						// json, mandándole un mensaje, de éxito (devuelve lo que se consigue) o de error.

						// NOTA*: No es necesario hacer algún trabajo sobre el callback de la request (petición).

						try {

							const clientes = await Cliente.findAll();

							res.json(clientes);

						} catch ( error ) {

							console.log("No se pudieron conseguir clientes. Error: " + error);

							res
								.status(500)
								.json( { error : "No se pudieron conseguir clientes. Error." } );


						}


					}

					// MICROSERVICIO - SELECCIÓN: CONSEGUIR TODOS LOS CLIENTES CUYO ID ESTÉ COMPRENDIDO ENTRE 5 Y 15.

					export const conseguirClientesFiltroId = async ( req, res ) => {

						try {

							const clientesFiltros = await Cliente.findAll(
								{
									where: {
										idCliente: [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
									}
								}
							)

							res.json(clientesFiltros);

						} catch ( error ) {

							res
								.status(500)
								.json( { error : "No se pudieron conseguir clientes que cumplan el filtro."} );

						}

					}

					// MICROSERVICIO - PROYECCIÓN: CONSEGUIR EL NOMBRE Y EL APELLIDO DE LOS CLIENTES.
					// Con attributes se hace la proyección. Hay que especificar también las columnas.

					export const conseguirNombreYApellidoClientes = async ( req, res ) => {

						try {

							const nombresYApellidos = await Cliente.findAll({
								attributes: ["NOMBRE_CLIENTE", "APELLIDO_CLIENTE"]
							});

							res.json(nombresYApellidos);

						} catch ( error ) {

							console.log("Error: " + error);

							res
								.status(500)
								.json({ error : "No se pudo cumplir satisfactoriamente su consulta."});

						}

					}


		

			Una vez hayamos armado los microservicios para nuestro modelo Cliente, tendremos que enlazarlos a rutas específicas de nuestra aplicación
			Web, para EXPONERLAS (exponer nuestra API) y que puedan ser CONSUMIDAS por un CLIENTE (NAVEGADOR).



  .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-  .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-
 / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \ / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \
`-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'    `-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'  



                                                                                                                     
    _    ____  ____        _ ____        _____ _       __  __    _    ___ _   _                                      
   / \  |  _ \|  _ \      | / ___|   _  | ____| |     |  \/  |  / \  |_ _| \ | |                                     
  / _ \ | |_) | |_) |  _  | \___ \  (_) |  _| | |     | |\/| | / _ \  | ||  \| |                                     
 / ___ \|  __/|  __/  | |_| |___) |  _  | |___| |___  | |  | |/ ___ \ | || |\  |                                     
/_/   \_|_|   |_|      \___/|____/  (_) |_____|_____| |_|  |_/_/   \_|___|_| \_|                                     
                                                                                                                     
                                                                                                                     
 ____  _____   _   _ _   _ _____ ____ _____ ____     _         _    ____  _     ___ ____    _    ____ ___ ___  _   _ 
|  _ \| ____| | \ | | | | | ____/ ___|_   _|  _ \   / \       / \  |  _ \| |   |_ _/ ___|  / \  / ___|_ _/ _ \| \ | |
| | | |  _|   |  \| | | | |  _| \___ \ | | | |_) | / _ \     / _ \ | |_) | |    | | |     / _ \| |    | | | | |  \| |
| |_| | |___  | |\  | |_| | |___ ___) || | |  _ < / ___ \   / ___ \|  __/| |___ | | |___ / ___ | |___ | | |_| | |\  |
|____/|_____| |_| \_|\___/|_____|____/ |_| |_| \_/_/   \_\ /_/   \_|_|   |_____|___\____/_/   \_\____|___\___/|_| \_|
                                                                                                                     
                               
                                                                                                 
                                                                                                 
                                                                                                 
                                              █████                                              
                                           ███████████                                           
                                        █████████████████                                        
                                    ██████████     ██████████                                    
                                 ██████████           ██████████                                 
                              ██████████                 ██████████                              
                           ██████████                       ██████████                           
                         ████████                               ████████                         
                        ██████                                     ███████                       
                       █████                       ██████            █████                       
                       █████          █████   ████████████████       █████                       
                       █████          █████  ███████████████████     █████                       
                       █████          █████ ██████         ██████    █████                       
                       █████          █████ ██████          █████    █████                       
                       █████          █████  █████████████           █████                       
                       █████          █████   ██████████████████     █████                       
                       █████          █████       ███████████████    █████                       
                       █████          █████ ████            ██████   █████                       
                       █████          █████ █████           ██████   █████                       
                       █████          █████ █████████   █████████    █████                       
                       █████          █████  ███████████████████     █████                       
                       █████          █████     █████████████        █████                       
                        ██████        █████                        ███████                       
                         ████████     █████                     █████████                        
                           ███████████████                   █████████                           
                              ███████████                ██████████                              
                                                      ██████████                                 
                                       ███████     ██████████                                    
                                        ██████████████████                                       
                                           ████████████                                          
                                              ██████                                             
                                                                                                 
                                                                                                 
                                                                                                 
                                                                                                                                                    


			Para dar nuestro paso final en el desarrollo del Backend de nuestra aplicación, trabajaremos ahora creando en la raíz de nuestra carpeta
			Backend un archivo llamado "app.js", que servirá como el "Main" de nuestra aplicación. En éste, tendremos que trabajar las siguientes 
			características:
				- Con la dependencia DOTENV: SELECCIONAREMOS EL PUERTO DE NUESTRA APLICACIÓN. UNO PARA EL BACKEND, Y OTRO PARA EL FRONTEND.
				- Con la dependencia EXPRESS: HAREMOS TODO EL ENLAZADO Y ENRUTADO DE NUESTRA API, PARA CON LOS ENLACES PERTINENTES (ENDPOINTS) - EXPONEMOS
				NUESTRA API PARA QUE OTROS LA PUEDAN CONSUMIR.
				- Con la dependencia CORS: PERMITIMOS QUE EL NAVEGADOR PUEDA EJECUTAR NUESTRO BACKEND (YA QUE ES EXTERNO AL NAVEGADOR).
			
			
			SEXTO - CREAMOS LA CONFIGURACIÓN DE NUESTRA APLICACIÓN (APP.JS), EXPONEMOS LA API AL PÚBLICO Y CREAMOS LA FUNCIÓN MAIN DE LA APLICACIÓN:
				- Para lograr ésto, primero debemos importar todas las dependencias que son necesarias para trabajar (ver último apartado,
				de dependencias y plugins necesarios):
				
						// Importamos las dependencias necesarias para que nuestra aplicación esté andando.

						import { express } from "express";
						import { cors } from "cors";
						import { dotenv } from "dotenv";
						
				- Después, tendremos que importar todos los otros módulos que hemos venido trabajando hasta ahora: La/las funciones de conexión con la
				BBDD (en ÉSTE CASO EN PARTICULAR, nos servirá la de "db-mockaroo.js", SIN EMBARGO EN EL PARCIAL HAY QUE USAR LA DE "db-init.js"), y 
				los SERVICIOS del modelo asociado (como sólo tenemos un modelo, que es Cliente, importaremos sus servicios):
				
						// Importamos las funciones necesarias con las que hemos ido trabajando.

						// import { dbInit } from "./Databases/db-init.js" // ÉSTE SE USARÁ EL DÍA DEL PARCIAL. NOS DARÁN LA BBDD.
						import { crearBaseDatosClientes } from "./Databases/db-mockaroo.js"; // COMO TUVIMOS QUE CREAR LA BASE DE DATOS, IMPORTAMOS ÉSTE.
						import { conseguirTodosLosClientes, conseguirClientesFiltroId, conseguirNombreYApellidoClientes } from "./Models/clientes.js"; // SON TODOS LOS SERVICIOS QUE HEMOS TRABAJADO HASTA AHORA.


			SEPTIMO - CONFIGURAR EL DIRECTORIO DE CONFIGURACIÓN:
				- Necesitaremos a partir de acá configurar el archivo en el que modificaremos el puerto con el que accederemos a los datos.
					- Dicho archivo tendrá que guardarse bajo el directorio "Config", y el archivo se llamará ".env" (en Inglés se pronuncia "dot env", de ahí el nombre de la dependencia dotenv).
					- Éste archivo ".env" tiene que tener algunas especificaciones sobre qué puerto trabajar. El número del puerto a asignar por carpeta Front o Back dependerá de lo estipulado para el día del parcial (un puerto distinto cada carpeta).
					
						# Acá pondremos el número del puerto que usaremos para la aplicación, recordando que:
						# El directorio de Front tendrá su propio puerto.
						# El directorio de Back también tendrá su puerto distinto.
						# Ésto para simular que al estar en dos puertos distintos, un Front consume la API de un Back en diferente sitio de comunicación.

						# Para nuestro Backend, usaremos el PUERTO 4000. Para nuestro Frontend, el PUERTO 5000.
						PORT=4000
			
			OCTAVO - TERMINAMOS DE ARMAR EL APP.JS:
				- Una vez configurado el puerto de la aplicación, seguimos trabajando en "app.js":
					- Seguimos con el resto del código:
				
						// Configurando dotenv, para que apunte al puerto que nosotros configuramos en "./Config/.env"
						// Acordarse que cualquier sintaxis de configuración, va entre llaves, pues usa la notación JSON.

						dotenv.config({ path : "./Config/.env"});

						// Inicializamos nuestro servidor de Express que es el que mediará todo el enrutamiento de la App y levantará el servidor. Ésto se usa en lugar de inicializar la App con HTTP debido a que es mucho más fácil. Es la razón por la cual usamos Express.

						// Le asignamos a una variable la función activa de express(), que llama a la ejecución de éste.

						const app = express();

						// Hacemos que express, a través de app, llame al módulo de cors() y éste se active, permitiendo el uso de APIs foráneas al cliente Web nativo (que la API que creamos funcione en el navegador).

						app.use(cors());

						// Endpoints: Acá crearemos los enrutamientos, para cada enlace o URL, le devolveremos al cliente algo.

						// ENDPOINT DE PRUEBA - QUE DEVUELVA EL ESTADO DEL CONSUMO DE LA API
						app.get("/status", ( req, res ) => {

							try {
								res.json({ respuesta : "STATUS: OK | STATUS CODE: " + res.status(200)});
							} catch ( error ) {
								res.json({ respuesta : "STATUS: ERROR DEL SERVIDOR | STATUS CODE: " + res.status(500)});
							}

						})

						// ENDPOINTS DE CONSUMO DE LOS MICROSERVICIOS - ACÁ LE ASIGNAREMOS UN EDPOINT PARA CADA MICROSERVICIO QUE CREAMOS PREVIAMENTE.

						// SE CREAN LOS ENDPOINTS, ESPECIFICANDO app (o express()) SEGUIDO DE, POR CADA PUNTO, EL VERBO HTTP, LA DIRECCIÓN URL QUE QUEREMOS QUE TENGA, Y DESPUÉS EL SERVICIO A CONSUMIR.

						app
						.get("/clientes", conseguirTodosLosClientes)
						.get("/clientes/filtrados", conseguirClientesFiltroId)
						.get("/clientes/nombres", conseguirNombreYApellidoClientes);

						// PONEMOS A ANDAR EL SERVIDOR - CREANDO LA FUNCIÓN MAIN()

						(async function main() {
							
							// Le asignamos el puerto que queremos que escuche, en .env, nosotros le dimos al Backend el puerto 4000. Le estamos asignando que, o le de ese, o que por defecto adquiera el 4000.

							const PORT = process.env.port || 4000;

							// Inicializamos la conexión a la BBDD - EN ESTE CASO, NO EXISTÍA Y LA TUVIMOS QUE CREAR. EN EL PARCIAL USAR dbInit()

							await crearBaseDatosClientes(); // Ésta función crea la BBDD si no la tenemos, y nos permite conectarnos a ella por el sync().

							// Configurar el puerto, usaremos app o express(), y usaremos el método .listen() para que escuche el puerto.

							app.listen(PORT, () => {
								console.log(`"Puerto listo y escuchando en: ${PORT}"`);
							})

						})();
						
			¿Cómo queda el código en éste último paso del Backend?
			VERSIÓN COMPLETA DE "app.js":
			
						// Importamos las dependencias necesarias para que nuestra aplicación esté andando.

						import express from "express";
						import cors from "cors";
						import dotenv from "dotenv";

						// Importamos las funciones necesarias con las que hemos ido trabajando.

						// import { dbInit } from "./Databases/db-init.js" // ÉSTE SE USARÁ EL DÍA DEL PARCIAL. NOS DARÁN LA BBDD.
						import crearBaseDatosClientes from "./Databases/db-mockaroo.js"; // COMO TUVIMOS QUE CREAR LA BASE DE DATOS, IMPORTAMOS ÉSTE.
						import { conseguirTodosLosClientes, conseguirClientesFiltroId, conseguirNombreYApellidoClientes } from "./Services/clientes.service.js";

						// SON TODOS LOS SERVICIOS QUE HEMOS TRABAJADO HASTA AHORA.

						// Configurando dotenv, para que apunte al puerto que nosotros configuramos en "./Config/.env"
						// Acordarse que cualquier sintaxis de configuración, va entre llaves, pues usa la notación JSON.

						dotenv.config({ path : "./Config/.env"});

						// Inicializamos nuestro servidor de Express que es el que mediará todo el enrutamiento de la App y levantará el servidor. Ésto se usa en lugar de inicializar la App con HTTP debido a que es mucho más fácil. Es la razón por la cual usamos Express.

						// Le asignamos a una variable la función activa de express(), que llama a la ejecución de éste.

						const app = express();

						// Hacemos que express, a través de app, llame al módulo de cors() y éste se active, permitiendo el uso de APIs foráneas al cliente Web nativo (que la API que creamos funcione en el navegador).

						app.use(cors());

						// Endpoints: Acá crearemos los enrutamientos, para cada enlace o URL, le devolveremos al cliente algo.

						// ENDPOINT DE PRUEBA - QUE DEVUELVA EL ESTADO DEL CONSUMO DE LA API
						app.get("/status", ( req, res ) => {

							try {
								res.json({ respuesta : "STATUS: OK | STATUS CODE: " + res.status(200)});
							} catch ( error ) {
								res.json({ respuesta : "STATUS: ERROR DEL SERVIDOR | STATUS CODE: " + res.status(500)});
							}

						})

						// ENDPOINTS DE CONSUMO DE LOS MICROSERVICIOS - ACÁ LE ASIGNAREMOS UN EDPOINT PARA CADA MICROSERVICIO QUE CREAMOS PREVIAMENTE.

						// SE CREAN LOS ENDPOINTS, ESPECIFICANDO app (o express()) SEGUIDO DE, POR CADA PUNTO, EL VERBO HTTP, LA DIRECCIÓN URL QUE QUEREMOS QUE TENGA, Y DESPUÉS EL SERVICIO A CONSUMIR.

						app
						.get("/clientes", conseguirTodosLosClientes)
						.get("/clientes/filtrados", conseguirClientesFiltroId)
						.get("/clientes/nombres", conseguirNombreYApellidoClientes);

						// PONEMOS A ANDAR EL SERVIDOR - CREANDO LA FUNCIÓN MAIN()

						(async function main() {

							// Le asignamos el puerto que queremos que escuche, en .env, nosotros le dimos al Backend el puerto 4000. Le estamos asignando que, o le de ese, o que por defecto adquiera el 4000.

							const PORT = process.env.port || 4000;

							// Inicializamos la conexión a la BBDD - EN ESTE CASO, NO EXISTÍA Y LA TUVIMOS QUE CREAR. EN EL PARCIAL USAR dbInit()

							await crearBaseDatosClientes();

							// Configurar el puerto, usaremos app o express(), y usaremos el método .listen() para que escuche el puerto.

							app.listen(PORT, () => {
								console.log(`"Puerto listo y escuchando en: ${PORT}"`);
							})

						})();



██████╗ ██████╗  ██████╗ ██████╗  █████╗ ███╗   ███╗ ██████╗ ███████╗    ███████╗███╗   ██╗    ██████╗  ██████╗ ███████╗████████╗███╗   ███╗ █████╗ ███╗   ██╗                                                                                                 
██╔══██╗██╔══██╗██╔═══██╗██╔══██╗██╔══██╗████╗ ████║██╔═══██╗██╔════╝    ██╔════╝████╗  ██║    ██╔══██╗██╔═══██╗██╔════╝╚══██╔══╝████╗ ████║██╔══██╗████╗  ██║██╗                                                                                              
██████╔╝██████╔╝██║   ██║██████╔╝███████║██╔████╔██║██║   ██║███████╗    █████╗  ██╔██╗ ██║    ██████╔╝██║   ██║███████╗   ██║   ██╔████╔██║███████║██╔██╗ ██║╚═╝                                                                                              
██╔═══╝ ██╔══██╗██║   ██║██╔══██╗██╔══██║██║╚██╔╝██║██║   ██║╚════██║    ██╔══╝  ██║╚██╗██║    ██╔═══╝ ██║   ██║╚════██║   ██║   ██║╚██╔╝██║██╔══██║██║╚██╗██║██╗                                                                                              
██║     ██║  ██║╚██████╔╝██████╔╝██║  ██║██║ ╚═╝ ██║╚██████╔╝███████║    ███████╗██║ ╚████║    ██║     ╚██████╔╝███████║   ██║   ██║ ╚═╝ ██║██║  ██║██║ ╚████║╚═╝                                                                                              
╚═╝     ╚═╝  ╚═╝ ╚═════╝ ╚═════╝ ╚═╝  ╚═╝╚═╝     ╚═╝ ╚═════╝ ╚══════╝    ╚══════╝╚═╝  ╚═══╝    ╚═╝      ╚═════╝ ╚══════╝   ╚═╝   ╚═╝     ╚═╝╚═╝  ╚═╝╚═╝  ╚═══╝                                                                                                 
                                                                                                                                                                                                                                                               
██╗      ██████╗  ██████╗ █████╗ ██╗     ██╗  ██╗ ██████╗ ███████╗████████╗   ██╗  ██╗ ██████╗  ██████╗  ██████╗     ██╗ ██████╗██╗     ██╗███████╗███╗   ██╗████████╗███████╗███████╗                                                                         
██║     ██╔═══██╗██╔════╝██╔══██╗██║     ██║  ██║██╔═══██╗██╔════╝╚══██╔══╝██╗██║  ██║██╔═████╗██╔═████╗██╔═████╗   ██╔╝██╔════╝██║     ██║██╔════╝████╗  ██║╚══██╔══╝██╔════╝██╔════╝                                                                         
██║     ██║   ██║██║     ███████║██║     ███████║██║   ██║███████╗   ██║   ╚═╝███████║██║██╔██║██║██╔██║██║██╔██║  ██╔╝ ██║     ██║     ██║█████╗  ██╔██╗ ██║   ██║   █████╗  ███████╗                                                                         
██║     ██║   ██║██║     ██╔══██║██║     ██╔══██║██║   ██║╚════██║   ██║   ██╗╚════██║████╔╝██║████╔╝██║████╔╝██║ ██╔╝  ██║     ██║     ██║██╔══╝  ██║╚██╗██║   ██║   ██╔══╝  ╚════██║                                                                         
███████╗╚██████╔╝╚██████╗██║  ██║███████╗██║  ██║╚██████╔╝███████║   ██║   ╚═╝     ██║╚██████╔╝╚██████╔╝╚██████╔╝██╔╝   ╚██████╗███████╗██║███████╗██║ ╚████║   ██║   ███████╗███████║                                                                         
╚══════╝ ╚═════╝  ╚═════╝╚═╝  ╚═╝╚══════╝╚═╝  ╚═╝ ╚═════╝ ╚══════╝   ╚═╝           ╚═╝ ╚═════╝  ╚═════╝  ╚═════╝ ╚═╝     ╚═════╝╚══════╝╚═╝╚══════╝╚═╝  ╚═══╝   ╚═╝   ╚══════╝╚══════╝                                                                         
                                                                                                                                                                                                                                                               
██╗      ██████╗  ██████╗ █████╗ ██╗     ██╗  ██╗ ██████╗ ███████╗████████╗   ██╗  ██╗ ██████╗  ██████╗  ██████╗     ██╗ ██████╗██╗     ██╗███████╗███╗   ██╗████████╗███████╗███████╗    ██╗███████╗██╗██╗  ████████╗██████╗  █████╗ ██████╗  ██████╗ ███████╗
██║     ██╔═══██╗██╔════╝██╔══██╗██║     ██║  ██║██╔═══██╗██╔════╝╚══██╔══╝██╗██║  ██║██╔═████╗██╔═████╗██╔═████╗   ██╔╝██╔════╝██║     ██║██╔════╝████╗  ██║╚══██╔══╝██╔════╝██╔════╝   ██╔╝██╔════╝██║██║  ╚══██╔══╝██╔══██╗██╔══██╗██╔══██╗██╔═══██╗██╔════╝
██║     ██║   ██║██║     ███████║██║     ███████║██║   ██║███████╗   ██║   ╚═╝███████║██║██╔██║██║██╔██║██║██╔██║  ██╔╝ ██║     ██║     ██║█████╗  ██╔██╗ ██║   ██║   █████╗  ███████╗  ██╔╝ █████╗  ██║██║     ██║   ██████╔╝███████║██║  ██║██║   ██║███████╗
██║     ██║   ██║██║     ██╔══██║██║     ██╔══██║██║   ██║╚════██║   ██║   ██╗╚════██║████╔╝██║████╔╝██║████╔╝██║ ██╔╝  ██║     ██║     ██║██╔══╝  ██║╚██╗██║   ██║   ██╔══╝  ╚════██║ ██╔╝  ██╔══╝  ██║██║     ██║   ██╔══██╗██╔══██║██║  ██║██║   ██║╚════██║
███████╗╚██████╔╝╚██████╗██║  ██║███████╗██║  ██║╚██████╔╝███████║   ██║   ╚═╝     ██║╚██████╔╝╚██████╔╝╚██████╔╝██╔╝   ╚██████╗███████╗██║███████╗██║ ╚████║   ██║   ███████╗███████║██╔╝   ██║     ██║███████╗██║   ██║  ██║██║  ██║██████╔╝╚██████╔╝███████║
╚══════╝ ╚═════╝  ╚═════╝╚═╝  ╚═╝╚══════╝╚═╝  ╚═╝ ╚═════╝ ╚══════╝   ╚═╝           ╚═╝ ╚═════╝  ╚═════╝  ╚═════╝ ╚═╝     ╚═════╝╚══════╝╚═╝╚══════╝╚═╝  ╚═══╝   ╚═╝   ╚══════╝╚══════╝╚═╝    ╚═╝     ╚═╝╚══════╝╚═╝   ╚═╝  ╚═╝╚═╝  ╚═╝╚═════╝  ╚═════╝ ╚══════╝
                                                                                                                                                                                                                                                               
██╗      ██████╗  ██████╗ █████╗ ██╗     ██╗  ██╗ ██████╗ ███████╗████████╗   ██╗  ██╗ ██████╗  ██████╗  ██████╗     ██╗ ██████╗██╗     ██╗███████╗███╗   ██╗████████╗███████╗███████╗    ██╗███╗   ██╗ ██████╗ ███╗   ███╗██████╗ ██████╗ ███████╗███████╗    
██║     ██╔═══██╗██╔════╝██╔══██╗██║     ██║  ██║██╔═══██╗██╔════╝╚══██╔══╝██╗██║  ██║██╔═████╗██╔═████╗██╔═████╗   ██╔╝██╔════╝██║     ██║██╔════╝████╗  ██║╚══██╔══╝██╔════╝██╔════╝   ██╔╝████╗  ██║██╔═══██╗████╗ ████║██╔══██╗██╔══██╗██╔════╝██╔════╝    
██║     ██║   ██║██║     ███████║██║     ███████║██║   ██║███████╗   ██║   ╚═╝███████║██║██╔██║██║██╔██║██║██╔██║  ██╔╝ ██║     ██║     ██║█████╗  ██╔██╗ ██║   ██║   █████╗  ███████╗  ██╔╝ ██╔██╗ ██║██║   ██║██╔████╔██║██████╔╝██████╔╝█████╗  ███████╗    
██║     ██║   ██║██║     ██╔══██║██║     ██╔══██║██║   ██║╚════██║   ██║   ██╗╚════██║████╔╝██║████╔╝██║████╔╝██║ ██╔╝  ██║     ██║     ██║██╔══╝  ██║╚██╗██║   ██║   ██╔══╝  ╚════██║ ██╔╝  ██║╚██╗██║██║   ██║██║╚██╔╝██║██╔══██╗██╔══██╗██╔══╝  ╚════██║    
███████╗╚██████╔╝╚██████╗██║  ██║███████╗██║  ██║╚██████╔╝███████║   ██║   ╚═╝     ██║╚██████╔╝╚██████╔╝╚██████╔╝██╔╝   ╚██████╗███████╗██║███████╗██║ ╚████║   ██║   ███████╗███████║██╔╝   ██║ ╚████║╚██████╔╝██║ ╚═╝ ██║██████╔╝██║  ██║███████╗███████║    
╚══════╝ ╚═════╝  ╚═════╝╚═╝  ╚═╝╚══════╝╚═╝  ╚═╝ ╚═════╝ ╚══════╝   ╚═╝           ╚═╝ ╚═════╝  ╚═════╝  ╚═════╝ ╚═╝     ╚═════╝╚══════╝╚═╝╚══════╝╚═╝  ╚═══╝   ╚═╝   ╚══════╝╚══════╝╚═╝    ╚═╝  ╚═══╝ ╚═════╝ ╚═╝     ╚═╝╚═════╝ ╚═╝  ╚═╝╚══════╝╚══════╝    
                                                                                                                                                                                                                                                               


Y si no tenemos Postman tenemos que probar en el navegador, poniendo la URL: localhost:4000/clientes ; localhost:4000/clientes/filtrados ; localhost:4000/clientes/nombres ...



██████╗  █████╗  ██████╗██╗  ██╗███████╗███╗   ██╗██████╗                 
██╔══██╗██╔══██╗██╔════╝██║ ██╔╝██╔════╝████╗  ██║██╔══██╗██╗             
██████╔╝███████║██║     █████╔╝ █████╗  ██╔██╗ ██║██║  ██║╚═╝             
██╔══██╗██╔══██║██║     ██╔═██╗ ██╔══╝  ██║╚██╗██║██║  ██║██╗             
██████╔╝██║  ██║╚██████╗██║  ██╗███████╗██║ ╚████║██████╔╝╚═╝             
╚═════╝ ╚═╝  ╚═╝ ╚═════╝╚═╝  ╚═╝╚══════╝╚═╝  ╚═══╝╚═════╝                 
                                                                          
████████╗███████╗██████╗ ███╗   ███╗██╗███╗   ██╗ █████╗ ██████╗  ██████╗ 
╚══██╔══╝██╔════╝██╔══██╗████╗ ████║██║████╗  ██║██╔══██╗██╔══██╗██╔═══██╗
   ██║   █████╗  ██████╔╝██╔████╔██║██║██╔██╗ ██║███████║██║  ██║██║   ██║
   ██║   ██╔══╝  ██╔══██╗██║╚██╔╝██║██║██║╚██╗██║██╔══██║██║  ██║██║   ██║
   ██║   ███████╗██║  ██║██║ ╚═╝ ██║██║██║ ╚████║██║  ██║██████╔╝╚██████╔╝
   ╚═╝   ╚══════╝╚═╝  ╚═╝╚═╝     ╚═╝╚═╝╚═╝  ╚═══╝╚═╝  ╚═╝╚═════╝  ╚═════╝ 
                                                                          



  .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-  .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-
 / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \ / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \
`-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'    `-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'  



    __________  ____  _   _______________   ______     ____  ______   __    ___       
   / ____/ __ \/ __ \/ | / /_  __/ ____/ | / / __ \   / __ \/ ____/  / /   /   |      
  / /_  / /_/ / / / /  |/ / / / / __/ /  |/ / / / /  / / / / __/    / /   / /| |      
 / __/ / _, _/ /_/ / /|  / / / / /___/ /|  / /_/ /  / /_/ / /___   / /___/ ___ |      
/_/ __/_/ |_|\____/_/ |_/_/_/_/_____/_/_|_/_____/__/_____/_____/  /_____/_/  |_|      
   /   |  / __ \/ /   /  _/ ____/   | / ____/  _/ __ \/ | / /                         
  / /| | / /_/ / /    / // /   / /| |/ /    / // / / /  |/ /                          
 / ___ |/ ____/ /____/ // /___/ ___ / /____/ // /_/ / /|  /                           
/_/  |_/_/   /_____/___/\____/_/  |_\____/___/\____/_/ |_/                            
                                                                                      


En ésta sección, trabajaremos del lado del CLIENTE (WEB/NAVEGADOR) en la presentación de los DATOS que estuvimos obteniendo y manipulando desde el FRONTEND.

Nuestra estructura de proyecto será similar a ésta:


EJERCICIOPRACTICA/
├─ FRONTEND // Ahora trabajaremos con ésta parte/
│  ├─ PAGES // EL MAQUETADO HTML BÁSICO DE NUESTRA PÁGINA/
│  │  ├─ clientes.html
│  ├─ STYLES // OPCIONAL, PARA UN POCO DE DISEÑO/
│  │  ├─ clientes.css
│  ├─ SCRIPTS // LO MÁS IMPORTANTE, EL CONSUMO D LA API DEL BACKEND/
│  │  ├─ consumoApiClientes.js
├─ BACKEND/
│  ├─ DATABASES/
│  │  ├─ db.js
│  │  ├─ db-init.js
│  │  ├─ db-mockaroo.js
│  │  ├─ db.sqlite
│  ├─ MODELOS/
│  │  ├─ clientes.js
│  ├─ SERVICIOS/
│  │  ├─ clientes.service.js
│  ├─ CONFIG/
│  │  ├─ .env
│  ├─ app.js


Para agilizar tiempos, maquetaremos sobre "clientes.html" el resultado de la petición de "localhost:4000/clientes", ya si quieren practicar con otros endpoints,
la sugerencia es hacer una página por endpoint (en éste alcance, ya más adelante cuando trabajemos con React podremos hacer todo en una sóla página).



  .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-  .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-
 / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \ / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \
`-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'    `-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'  



███╗   ███╗ █████╗  ██████╗ ██╗   ██╗███████╗████████╗ █████╗ ██████╗  ██████╗     ██╗  ██╗████████╗███╗   ███╗██╗     
████╗ ████║██╔══██╗██╔═══██╗██║   ██║██╔════╝╚══██╔══╝██╔══██╗██╔══██╗██╔═══██╗    ██║  ██║╚══██╔══╝████╗ ████║██║     
██╔████╔██║███████║██║   ██║██║   ██║█████╗     ██║   ███████║██║  ██║██║   ██║    ███████║   ██║   ██╔████╔██║██║     
██║╚██╔╝██║██╔══██║██║▄▄ ██║██║   ██║██╔══╝     ██║   ██╔══██║██║  ██║██║   ██║    ██╔══██║   ██║   ██║╚██╔╝██║██║     
██║ ╚═╝ ██║██║  ██║╚██████╔╝╚██████╔╝███████╗   ██║   ██║  ██║██████╔╝╚██████╔╝    ██║  ██║   ██║   ██║ ╚═╝ ██║███████╗
╚═╝     ╚═╝╚═╝  ╚═╝ ╚══▀▀═╝  ╚═════╝ ╚══════╝   ╚═╝   ╚═╝  ╚═╝╚═════╝  ╚═════╝     ╚═╝  ╚═╝   ╚═╝   ╚═╝     ╚═╝╚══════╝
                                                                                                                       
 ██████╗██╗     ██╗███████╗███╗   ██╗████████╗███████╗███████╗   ██╗  ██╗████████╗███╗   ███╗██╗                       
██╔════╝██║     ██║██╔════╝████╗  ██║╚══██╔══╝██╔════╝██╔════╝   ██║  ██║╚══██╔══╝████╗ ████║██║                       
██║     ██║     ██║█████╗  ██╔██╗ ██║   ██║   █████╗  ███████╗   ███████║   ██║   ██╔████╔██║██║                       
██║     ██║     ██║██╔══╝  ██║╚██╗██║   ██║   ██╔══╝  ╚════██║   ██╔══██║   ██║   ██║╚██╔╝██║██║                       
╚██████╗███████╗██║███████╗██║ ╚████║   ██║   ███████╗███████║██╗██║  ██║   ██║   ██║ ╚═╝ ██║███████╗                  
 ╚═════╝╚══════╝╚═╝╚══════╝╚═╝  ╚═══╝   ╚═╝   ╚══════╝╚══════╝╚═╝╚═╝  ╚═╝   ╚═╝   ╚═╝     ╚═╝╚══════╝                  
                                                                                                                       


					   ████████████████████████████████████████████   
					   ████████████████████████████████████████████   
					   ████████████████████████████████████████████   
					   ████████████████████████████████████████████   
					   ████████████████████████████████████████████   
					   █████████                          █████████   
						████████                          ████████    
						████████      ████████████████████████████    
						████████     █████████████████████████████    
						████████     █████████████████████████████    
						█████████    █████████████████████████████    
						█████████                        █████████    
						█████████                        █████████    
						█████████                        █████████    
						████████████████████████████     █████████    
						████████████████████████████     █████████    
						 █████████    ██████████████     ████████     
						 █████████    ██████████████    █████████     
						 █████████        ██████        █████████     
						 █████████                      █████████     
						 ████████████                ████████████     
						 ███████████████████  ███████████████████     
						  ██████████████████████████████████████      
						  ██████████████████████████████████████      
							██████████████████████████████████        
								   ████████████████████               
										██████████                    




				NOVENO - CREAR EL HTML ESTÁTICO DE NUESTRA PÁGINA (ARCHIVO "clientes.html)":
					- Nuestro maquetado consistirá en hacer una página web que contenga una tabla, y esa tabla tendrá que tener algunos elementos identificables los cuáles podrán ser
					accedidos por el CSS y el JS.
					- Estructura propuesta básica para la tabla:
					
					<table>
						<!-- Cabecera de la Tabla con las COLUMNAS -->
						<!-- Ésto se logra gracias a thead, que es el tag para ir marcando los elementos de la cabecera -->
						<thead>
							<tr>
								<th scope="col"> NOMBRE COLUMNA 1 (IDENTIFICADOR O DE SECUENCIA) </th>
								<th scope="col"> NOMBRE COLUMNA 2 </th>
								<th scope="col"> NOMBRE COLUMNA 3 </th>
								<th scope="col"> NOMBRE COLUMNA 4 </th>
								<th scope="col"> NOMBRE COLUMNA 5 </th>
							</tr>
						</thead>
						
						<!-- Creando una FILA en la Tabla. OJO, ésto se tiene que ir haciendo con JavaScript a través de DOM Manipulation -->
						<!-- con el tag tbody, OJO, tenemos que identificar con un id para marcar que acá estaremos empezando la renderización con JS -->
						
						<tbody id="Datos">
						
							<tr>
								<th scope="row"> NÚMERO IDENTIFICADOR O DE SECUENCIA (Ej: 1) </th>
								<td> NOMBRE ATRIBUTO DEL REGISTRO 2 </td>
								<td> NOMBRE ATRIBUTO DEL REGISTRO 3 </td>
								<td> NOMBRE ATRIBUTO DEL REGISTRO 4 </td>
								<td> NOMBRE ATRIBUTO DEL REGISTRO 5 </td>
							</tr>
							
							
						</tbody>
					
				</table>
					
					- En nuestro caso, para la tabla CLIENTES, necesitamos que tenga EXACTAMENTE la forma en la que tenemos los datos en nuestra BASE DE DATOS:
					
				<table>
						<thead>
							<tr>
								<th scope="col"> ID_CLIENTE </th>
								<th scope="col"> NOMBRE_CLIENTE </th>
								<th scope="col"> APELLIDO_CLIENTE </th>
								<th scope="col"> FECHA_AFILIACION </th>
								<th scope="col"> ES_CLIENTE_PREMIUM </th>
							</tr>
						</thead>
						
						<!-- SÓLO NOS LIMITAREMOS A CREAR EL tbody CON EL id "Datos" YA QUE SERÁ ACCEDIDO POR EL JS -->
						<!-- EL JS SE ENCARGARÁ DE CREAR FILA POR FILA... -->
						
						<tbody id="Datos">
							<tr>
								<!-- Resto del código hecho con JS -->
							</tr>
						</tbody>
					
				</table>
					



  .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-  .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-
 / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \ / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \
`-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'    `-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'  




███████╗███████╗████████╗██╗██╗      ██████╗ ███████╗     ██████╗███████╗███████╗        
██╔════╝██╔════╝╚══██╔══╝██║██║     ██╔═══██╗██╔════╝    ██╔════╝██╔════╝██╔════╝        
█████╗  ███████╗   ██║   ██║██║     ██║   ██║███████╗    ██║     ███████╗███████╗        
██╔══╝  ╚════██║   ██║   ██║██║     ██║   ██║╚════██║    ██║     ╚════██║╚════██║        
███████╗███████║   ██║   ██║███████╗╚██████╔╝███████║    ╚██████╗███████║███████║        
╚══════╝╚══════╝   ╚═╝   ╚═╝╚══════╝ ╚═════╝ ╚══════╝     ╚═════╝╚══════╝╚══════╝        
                                                                                         
 ██████╗██╗     ██╗███████╗███╗   ██╗████████╗███████╗███████╗    ██████╗███████╗███████╗
██╔════╝██║     ██║██╔════╝████╗  ██║╚══██╔══╝██╔════╝██╔════╝   ██╔════╝██╔════╝██╔════╝
██║     ██║     ██║█████╗  ██╔██╗ ██║   ██║   █████╗  ███████╗   ██║     ███████╗███████╗
██║     ██║     ██║██╔══╝  ██║╚██╗██║   ██║   ██╔══╝  ╚════██║   ██║     ╚════██║╚════██║
╚██████╗███████╗██║███████╗██║ ╚████║   ██║   ███████╗███████║██╗╚██████╗███████║███████║
 ╚═════╝╚══════╝╚═╝╚══════╝╚═╝  ╚═══╝   ╚═╝   ╚══════╝╚══════╝╚═╝ ╚═════╝╚══════╝╚══════╝
                                                                                       


                                                                                               
                                                                                               
                                                                                               
                                                                                               
                                                                                               
                           ███████████████████████████████████████████                         
                         ███████████████████████████████████████████████                       
                        ██████████████████████████████████████████████████                     
                       ███████████████████████████████████████████████████                     
                       ███████████████████████████████████████████████████                     
                       ███████████████████████████████████████████████████                     
                       ██████████████                    █████████████████                     
                       ██████████████                      ███████████████                     
                       ██████████████       ████████        ██████████████                     
                       ██████████████       █████████        █████████████                     
                       ██████████████       ██████████       █████████████                     
                       ██████████████       █████████       ██████████████                     
                       ██████████████                     ████████████████                     
                       ██████████████                    █████████████████                     
                       ██████████████                       ██████████████                     
                       ██████████████       ██████████       █████████████                     
                       ██████████████       ███████████      █████████████                     
                       ██████████████       ███████████       ████████████                     
                       ██████████████       ██████████       █████████████                     
                       ██████████████       ████████         █████████████                     
                       ██████████████                       ██████████████                     
                       ██████████████                    █████████████████                     
                       ███████████████████████████████████████████████████                     
                       ███████████████████████████████████████████████████                     
                       ███████████████████████████████████████████████████                     
                        █████████████████████████████████████████████████                      
                          ██████████████████████████████████████████████                       
                            █████████████████████████████████████████                          
                                                                                               
                                                                                               
                                                                                               
                                                                                               
                                                                                               
                                                                                               
                    ████                                                                       
                   ███████                 ███        ███                                      
                   ███████  ██████ ████████████████████████████ █████ ███████                  
                   ███████ ███  ██████ ███████ █████  ███ ████  █████████  ███                 
                   ███ ███████████████ ███████   ████ ███ ███  ███ ███████ ███                 
                   ███████  ██████  █████   █████████ ███████  ██████████████                  
                                                                      ███                      
                                                                                               
                                                                                               
                                                                                               													   

			DÉCIMO - AGREGANDO BOOTSTRAP DESDE NPM AL PROYECTO PARA SIMPLIFICAR LOS ESTILOS:

			Para el apartado de estilos, nos limitaremos ya sea a la manipulación de algunos estilos básicos a compartir en la aplicación o con el uso de Bootstrap
			(si se nos permite durante el parcial). Para insalar la dependencia de Bootstrap, podemos usar: "npm i bootstrap", acto seguido vincular nuestro archivo
			HTML "clientes.html" con el uso de Bootstrap.
			
			Posteriormente, deberemos pegar lo siguiente en el <head> de nuestro archivo HTML:
			
			    <!-- Bootstrap - Estilos -->

				<link href="../../node_modules/bootstrap/dist/css/bootstrap.min.css" rel="stylesheet">

				<!-- Bootstrap - Scripts -->

				<script src="../../node_modules/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
				
			Es importante que los hipervínculos apunten a la carpeta de node_modules, luego a bootstrap, a dist (distribución) y de allí en más al resto de la ruta,
			dependiendo de cómo hayan trabajado el árbol de directorios.
			
			Si necesitásemos añadir algún archivo adicional CSS, podemos crear uno llamado "clientes.css". En éste caso no lo haré porque quiero seguir trabajando
			con Bootstrap.
			
												
		

  .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-  .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-
 / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \ / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \
`-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'    `-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'  





██╗      ██████╗     ███╗   ███╗ █████╗ ███████╗    ██╗███╗   ███╗██████╗  ██████╗ ██████╗ ████████╗ █████╗ ███╗   ██╗████████╗███████╗                             
██║     ██╔═══██╗    ████╗ ████║██╔══██╗██╔════╝    ██║████╗ ████║██╔══██╗██╔═══██╗██╔══██╗╚══██╔══╝██╔══██╗████╗  ██║╚══██╔══╝██╔════╝                             
██║     ██║   ██║    ██╔████╔██║███████║███████╗    ██║██╔████╔██║██████╔╝██║   ██║██████╔╝   ██║   ███████║██╔██╗ ██║   ██║   █████╗                               
██║     ██║   ██║    ██║╚██╔╝██║██╔══██║╚════██║    ██║██║╚██╔╝██║██╔═══╝ ██║   ██║██╔══██╗   ██║   ██╔══██║██║╚██╗██║   ██║   ██╔══╝                               
███████╗╚██████╔╝    ██║ ╚═╝ ██║██║  ██║███████║    ██║██║ ╚═╝ ██║██║     ╚██████╔╝██║  ██║   ██║   ██║  ██║██║ ╚████║   ██║   ███████╗                             
╚══════╝ ╚═════╝     ╚═╝     ╚═╝╚═╝  ╚═╝╚══════╝    ╚═╝╚═╝     ╚═╝╚═╝      ╚═════╝ ╚═╝  ╚═╝   ╚═╝   ╚═╝  ╚═╝╚═╝  ╚═══╝   ╚═╝   ╚══════╝                             
                                                                                                                                                                    
 ██████╗ ██████╗ ███╗   ██╗███████╗██╗   ██╗███╗   ███╗ ██████╗     ██████╗ ███████╗    ██╗      █████╗      █████╗ ██████╗ ██╗                                     
██╔════╝██╔═══██╗████╗  ██║██╔════╝██║   ██║████╗ ████║██╔═══██╗    ██╔══██╗██╔════╝    ██║     ██╔══██╗    ██╔══██╗██╔══██╗██║                                     
██║     ██║   ██║██╔██╗ ██║███████╗██║   ██║██╔████╔██║██║   ██║    ██║  ██║█████╗      ██║     ███████║    ███████║██████╔╝██║                                     
██║     ██║   ██║██║╚██╗██║╚════██║██║   ██║██║╚██╔╝██║██║   ██║    ██║  ██║██╔══╝      ██║     ██╔══██║    ██╔══██║██╔═══╝ ██║                                     
╚██████╗╚██████╔╝██║ ╚████║███████║╚██████╔╝██║ ╚═╝ ██║╚██████╔╝    ██████╔╝███████╗    ███████╗██║  ██║    ██║  ██║██║     ██║                                     
 ╚═════╝ ╚═════╝ ╚═╝  ╚═══╝╚══════╝ ╚═════╝ ╚═╝     ╚═╝ ╚═════╝     ╚═════╝ ╚══════╝    ╚══════╝╚═╝  ╚═╝    ╚═╝  ╚═╝╚═╝     ╚═╝                                     
                                                                                                                                                                    
 ██████╗ ██████╗ ███╗   ██╗███████╗██╗   ██╗███╗   ███╗ ██████╗  █████╗ ██████╗ ██╗ ██████╗██╗     ██╗███████╗███╗   ██╗████████╗███████╗███████╗        ██╗███████╗
██╔════╝██╔═══██╗████╗  ██║██╔════╝██║   ██║████╗ ████║██╔═══██╗██╔══██╗██╔══██╗██║██╔════╝██║     ██║██╔════╝████╗  ██║╚══██╔══╝██╔════╝██╔════╝        ██║██╔════╝
██║     ██║   ██║██╔██╗ ██║███████╗██║   ██║██╔████╔██║██║   ██║███████║██████╔╝██║██║     ██║     ██║█████╗  ██╔██╗ ██║   ██║   █████╗  ███████╗        ██║███████╗
██║     ██║   ██║██║╚██╗██║╚════██║██║   ██║██║╚██╔╝██║██║   ██║██╔══██║██╔═══╝ ██║██║     ██║     ██║██╔══╝  ██║╚██╗██║   ██║   ██╔══╝  ╚════██║   ██   ██║╚════██║
╚██████╗╚██████╔╝██║ ╚████║███████║╚██████╔╝██║ ╚═╝ ██║╚██████╔╝██║  ██║██║     ██║╚██████╗███████╗██║███████╗██║ ╚████║   ██║   ███████╗███████║██╗╚█████╔╝███████║
 ╚═════╝ ╚═════╝ ╚═╝  ╚═══╝╚══════╝ ╚═════╝ ╚═╝     ╚═╝ ╚═════╝ ╚═╝  ╚═╝╚═╝     ╚═╝ ╚═════╝╚══════╝╚═╝╚══════╝╚═╝  ╚═══╝   ╚═╝   ╚══════╝╚══════╝╚═╝ ╚════╝ ╚══════╝
                                                                                                                                                                    

												 ████████████                             
											 ████████████████████                         
										   ██████            ██████                       
										  █████                 ████                      
										 ████                    ████                     
								   █████████                      █████████               
							   ████████████                        ████████████           
							 ██████                                        ██████         
						   █████                                              █████       
						  █████                                                █████      
						  ████           ██           ██████         █          ████      
						 ████           █████        ██████████     ███          ████     
						 ████          ██████        ███    ████    ███          ████     
						 ████          ███████       ███     ███    ███          ████     
						 █████        ████ ████      ███████████    ███         █████     
					   ██████        ████   ████     ██████████     ███          ██████   
					  ████           ███████████     ███            ███             ████  
					 ████           █████████████    ███            ███              ████ 
					 ████          ████       ████   ███            ███              ████ 
					 ███            ██         ██     ██             █                ███ 
					 ████                                                            ████ 
					 ████                                                            ████ 
					  █████                                                        █████  
					   ██████                                                    ██████   
						  █████████████████████████  ████  ██████████████████████████     
							 █████████████████████    ██    █████████████████████         
								  ███      ███                  ███      ███              
								  ███      ███                  ███      ███              
								  ██████   ████                ████   ██████              
									█████   ████              ████   ██████               
									  ████   █████          █████   ████                  
									  █████   ██████████████████   █████                  
									  ████       ████████████       ████                  
									  █████  ██                ██  █████                  
									   ████████████        ████████████                   
										 ████████████    ████████████                     
												 ████████████                             
												  ██████████                              



			UNDÉCIMO - CREACIÓN DEL ARCHIVO JAVASCRIPT QUE MANEJARÁ LA RENDERIZACIÓN DE LOS DATOS OBTENIDOS A TRAVÉS DE NUESTRA API:
			- Es el paso que termina de integrar todo lo que hemos venido trabajando hasta ahora, el Backend con el Frontend.
			- Tenemos que crear un archivo que nos facilite el trabajo de consumir la API que creamos en los pasos anteriores, lo llamaremos "consumirApiClientes.js"
			pero perfectamente puede llevar cualquier otro nombre.
				- La estructura del archivo debe ser la siguiente:
					- Métodos para consumir una API
					- Métodos para manejar las tablas, selectores, demás elementos del maquetado HTML
					- Métodos para manipular el DOM y/o eventos (addEventListener)
			
					// CONSUMO DE LA API QUE CREAMOS EN EL BACKEND UTILIZANDO EL MÉTODO fetch()
					
					// MÉTODOS PARA CONSUMIR LA API - SIEMPRE TIENEN QUE ESTAR
					
					// CONSEGUIR TODOS LOS CLIENTES

					const conseguirTodosLosClientes = async () => {

						const respuesta = await fetch('http://localhost:4000/clientes');

						const data = await respuesta.json();

						console.log(data);

						return data;


					}

					// CONSEGUIR LOS CLIENTES CUYO idCliente ESTÁ ENTRE EL 5 Y EL 15

					const conseguirClientesFiltrados = async () => {

						const respuesta = await fetch('http://localhost:4000/clientes');

						const data = await respuesta.json();

						return data;

					}

					// CONSEGUIR LOS NOMBRES Y APELLIDOS DE LOS CLIENTES

					const conseguirNombreYApellidoClientes = async () => {

						const respuesta = await fetch('http://localhost:4000/clientes/nombres');

						const data = await respuesta.json();

						return data;

					}


					// MÉTODOS PARA OPERAR SOBRE UNA TABLA - SIEMPRE TIENEN QUE ESTAR

					// MANIPULAMOS LA TABLA PARA CREAR REGISTROS Y ASIGNÁRSELOS

					// LIMPIAR LA TABLA

					const limpiarTabla = ( tabla ) => {

						while (tabla.rows.length > 0) {
							tabla.deleteRow(0);
						}

					}

					// CARGAR LA TABLA

					const cargarTabla = async () => {

						const cuerpoTabla = document.getElementById('Datos');

						limpiarTabla(cuerpoTabla);

						try {

							const clientes = await conseguirTodosLosClientes();

							clientes.forEach( ( elemento ) => {

								// RECORDAR, COMILLAS FRANCESAS EN ASCII: ALT + 96
								// Para obtener el <tr></tr>, se lo pedimos a la tabla.

								const textoFila = `
								<th scope="row">${elemento.idCliente}</th>
								<td>${elemento.nombre}</td>
								<td>${elemento.apellido}</td>
								<td>${elemento.fechaAfiliacion}</td>
								<td>${(elemento.premium === true ? "Si" : "No")}</td>
								`;

								const fila = cuerpoTabla.insertRow(cuerpoTabla.rows.length)
								fila.innerHTML = textoFila;

							})

						} catch ( error ) {

							console.log("Error: " + error);


						}

					}


					// MÉTODOS PARA TRABAJAR SOBRE EL DOM - SIEMPRE TIENEN QUE ESTAR

					// Creamos una función que permita manipular el DOM, tan pronto se cargue el resto del HTML.

					document.addEventListener('DOMContentLoaded', async ( evento ) => {

						await cargarTabla();

					})
			
			
			
			DUODÉCIMO (PASO FINAL) - CONECTAMOS EL SCRIPT GENERADO CON EL HTML PARA LA RENDERIZACIÓN:
				- ES IMPORTANTE NO OLVIDAR PONER EL <script></script> que trabajamos en el archivo HTML, ya sea en el <head> o al final de <body>
				- Nos estaría quedando así el archivo definitivo HTML:
				
						<!DOCTYPE html>
						<html lang="en">
						<head>
							<meta charset="UTF-8">
							<meta name="viewport" content="width=device-width, initial-scale=1.0">
							<title>Práctica Clientes  - HTML</title>

							<!-- Bootstrap - Estilos -->

							<link href="../../node_modules/bootstrap/dist/css/bootstrap.min.css" rel="stylesheet">

							<!-- Bootstrap - Scripts -->

							<script src="../../node_modules/bootstrap/dist/js/bootstrap.bundle.min.js"></script>

						</head>
						<body>
							
							<h1>TABLA: CLIENTES</h1>

							<table>
								<thead>
									<tr>
										<th scope="col"> ID_CLIENTE </th>
										<th scope="col"> NOMBRE_CLIENTE </th>
										<th scope="col"> APELLIDO_CLIENTE </th>
										<th scope="col"> FECHA_AFILIACION </th>
										<th scope="col"> ES_CLIENTE_PREMIUM </th>
									</tr>
								</thead>
								
								<!-- SÓLO NOS LIMITAREMOS A CREAR EL tbody CON EL id "Datos" YA QUE SERÁ ACCEDIDO POR EL JS -->
								<!-- EL JS SE ENCARGARÁ DE CREAR FILA POR FILA... -->
								
								<tbody id="Datos">
									<tr>
										<!-- Ésta parte del código no se pone, SE HACE EN EL .JS -->
									</tr>
								</tbody>
							</table>
							
							
							<!-- Script Personal - consumirApiClientes -->
							<script src="../Scripts/consumirApiClientes.js"></script>

						</body>
						</html>


			Claramente podemos hacer más operaciones y consumir todavía más APIs y recursos propios. Pero para ello, hay que aumentar el número de páginas estáticas
			e ir trabajando en el diseño de cada una. Acá se propuso una forma de encarar lo más básico. Todo lo demás que aprendan y sepan hacer, suma.



███████╗██████╗  ██████╗ ███╗   ██╗████████╗███████╗███╗   ██╗██████╗     
██╔════╝██╔══██╗██╔═══██╗████╗  ██║╚══██╔══╝██╔════╝████╗  ██║██╔══██╗██╗ 
█████╗  ██████╔╝██║   ██║██╔██╗ ██║   ██║   █████╗  ██╔██╗ ██║██║  ██║╚═╝ 
██╔══╝  ██╔══██╗██║   ██║██║╚██╗██║   ██║   ██╔══╝  ██║╚██╗██║██║  ██║██╗ 
██║     ██║  ██║╚██████╔╝██║ ╚████║   ██║   ███████╗██║ ╚████║██████╔╝╚═╝ 
╚═╝     ╚═╝  ╚═╝ ╚═════╝ ╚═╝  ╚═══╝   ╚═╝   ╚══════╝╚═╝  ╚═══╝╚═════╝     
                                                                          
████████╗███████╗██████╗ ███╗   ███╗██╗███╗   ██╗ █████╗ ██████╗  ██████╗ 
╚══██╔══╝██╔════╝██╔══██╗████╗ ████║██║████╗  ██║██╔══██╗██╔══██╗██╔═══██╗
   ██║   █████╗  ██████╔╝██╔████╔██║██║██╔██╗ ██║███████║██║  ██║██║   ██║
   ██║   ██╔══╝  ██╔══██╗██║╚██╔╝██║██║██║╚██╗██║██╔══██║██║  ██║██║   ██║
   ██║   ███████╗██║  ██║██║ ╚═╝ ██║██║██║ ╚████║██║  ██║██████╔╝╚██████╔╝
   ╚═╝   ╚══════╝╚═╝  ╚═╝╚═╝     ╚═╝╚═╝╚═╝  ╚═══╝╚═╝  ╚═╝╚═════╝  ╚═════╝ 
                                                                          




  .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-  .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-
 / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \ / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \
`-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'    `-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'  
                                                                         

                                                                                                          
 ____  _____ ____  _____ _   _ ____  _____ _   _  ____ ___    _    ____   __   __                         
|  _ \| ____|  _ \| ____| \ | |  _ \| ____| \ | |/ ___|_ _|  / \  / ___|  \ \ / /                         
| | | |  _| | |_) |  _| |  \| | | | |  _| |  \| | |    | |  / _ \ \___ \   \ V /                          
| |_| | |___|  __/| |___| |\  | |_| | |___| |\  | |___ | | / ___ \ ___) |   | |                           
|____/|_____|_|   |_____|_| \_|____/|_____|_| \_|\____|___/_/   \_|____/    |_|                           
                                                                                                          
                                                                                                          
 ____  _    _   _  ____ ___ _   _ ____    ___ __  __ ____   ___  ____ _____  _    _   _ _____ _____ ____  
|  _ \| |  | | | |/ ___|_ _| \ | / ___|  |_ _|  \/  |  _ \ / _ \|  _ |_   _|/ \  | \ | |_   _| ____/ ___| 
| |_) | |  | | | | |  _ | ||  \| \___ \   | || |\/| | |_) | | | | |_) || | / _ \ |  \| | | | |  _| \___ \ 
|  __/| |__| |_| | |_| || || |\  |___) |  | || |  | |  __/| |_| |  _ < | |/ ___ \| |\  | | | | |___ ___) |
|_|   |_____\___/ \____|___|_| \_|____/  |___|_|  |_|_|    \___/|_| \_\|_/_/   \_|_| \_| |_| |_____|____/ 
                                                                                                          



- CREAR UN PROYECTO / INSTALAR EL package.json:
	- Comando: npm init
	- Revisar la anatomía del archivo package.json:
		- Si le agregamos el atributo "type" : "module", el archivo de JavaScript al que apunte el proyecto será un módulo que podrá ser importado con import.
		- Para poder configurar comandos personalizados "npm run <comando>":
			- En el objeto "scripts", añadir un par clave-valor de la siguiente forma:
				- "nombreComandoDeseado" : "<comando> <archivo>" ; ejemplo: "dev" : "npx nodemon app.js";
			
- Plugins:

	- SQLite Viewer: Para poder ver las tablas con las que trabajemos.
	- Live Server: Para poder ver en tiempo real la aplicación.

- DEPENDENCIAS IMPORTANTES:
	- Inicializar un package.json: npm init -y
	- Instalar todo lo que se baje: npm i
	- Express: npm i express
	- dotenv: npm i dotenv
	- CORS: npm i cors
	- Sequelize y SQLite3: npm i sequelize sqlite3
	- Nodemon: npm i nodemon
	- Bootstrap: npm i bootstrap
	- Diferencias entre NPM y NPX:	
		- NPM: Permite instalar, desinstalar, actualizar y utilizar paquetes de nuestro proyecto de JavaScript.
		- NPX: Permite EJECUTAR (utilizar) paquetes que NO hayamos instalado en nuestro proyecto.
	- Crear un archivo .gitignore:
		- ¿Qué va en el archivo .gitignore?
			- La carpeta node_modules (completa)
			

- Scripts Interesantes a tener en el package.json:
	"start": "node ./Back/app.js"
    "dev": "npx nodemon ./Back/app.js" // O también "npm nodemon ./Back/app.js" si instalaron previamente Nodemon
	

  .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-  .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-
 / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \ / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \
`-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'    `-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'  
                                                                         

███████╗██╗███╗   ██╗    ██████╗ ███████╗██╗         ██████╗ ██████╗  ██████╗ ██╗   ██╗███████╗ ██████╗████████╗ ██████╗ 
██╔════╝██║████╗  ██║    ██╔══██╗██╔════╝██║         ██╔══██╗██╔══██╗██╔═══██╗╚██╗ ██╔╝██╔════╝██╔════╝╚══██╔══╝██╔═══██╗
█████╗  ██║██╔██╗ ██║    ██║  ██║█████╗  ██║         ██████╔╝██████╔╝██║   ██║ ╚████╔╝ █████╗  ██║        ██║   ██║   ██║
██╔══╝  ██║██║╚██╗██║    ██║  ██║██╔══╝  ██║         ██╔═══╝ ██╔══██╗██║   ██║  ╚██╔╝  ██╔══╝  ██║        ██║   ██║   ██║
██║     ██║██║ ╚████║    ██████╔╝███████╗███████╗    ██║     ██║  ██║╚██████╔╝   ██║   ███████╗╚██████╗   ██║   ╚██████╔╝
╚═╝     ╚═╝╚═╝  ╚═══╝    ╚═════╝ ╚══════╝╚══════╝    ╚═╝     ╚═╝  ╚═╝ ╚═════╝    ╚═╝   ╚══════╝ ╚═════╝   ╚═╝    ╚═════╝ 
                                                                                                                         

  .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-  .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-
 / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \ / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \
`-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'    `-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'  